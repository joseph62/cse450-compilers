Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING_LITERAL
    COMMAND_BREAK
    COMMENT
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> <empty>
Rule 3     statements -> statements statement
Rule 4     statement -> scopeupbro { statements }
Rule 5     scopeupbro -> <empty>
Rule 6     statement -> expression ;
Rule 7     statement -> declaration ;
Rule 8     statement -> print_statement ;
Rule 9     print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr )
Rule 10    non_empty_comma_sep_expr -> expression
Rule 11    non_empty_comma_sep_expr -> expression , non_empty_comma_sep_expr
Rule 12    declaration -> simple_declaration
Rule 13    declaration -> assign_declaration
Rule 14    simple_declaration -> type ID
Rule 15    assign_declaration -> simple_declaration = expression
Rule 16    var_usage -> ID
Rule 17    expression -> var_usage = expression
Rule 18    expression -> var_usage ASSIGN_ADD expression
Rule 19    expression -> var_usage ASSIGN_SUB expression
Rule 20    expression -> var_usage ASSIGN_MULT expression
Rule 21    expression -> var_usage ASSIGN_DIV expression
Rule 22    expression -> var_usage
Rule 23    expression -> COMMAND_RANDOM ( expression )
Rule 24    type -> TYPE
Rule 25    expression -> expression BOOL_AND expression
Rule 26    expression -> expression BOOL_OR expression
Rule 27    expression -> VAL_LITERAL
Rule 28    expression -> CHAR_LITERAL
Rule 29    expression -> expression - expression
Rule 30    expression -> expression * expression
Rule 31    expression -> expression / expression
Rule 32    expression -> expression + expression
Rule 33    expression -> expression COMP_EQU expression
Rule 34    expression -> expression COMP_NEQU expression
Rule 35    expression -> - expression
Rule 36    expression -> ! expression
Rule 37    expression -> expression COMP_LESS expression
Rule 38    expression -> expression COMP_GTR expression
Rule 39    expression -> expression COMP_LTE expression
Rule 40    expression -> expression COMP_GTE expression
Rule 41    expression -> ( expression )

Terminals, with rules where they appear

!                    : 36
(                    : 9 23 41
)                    : 9 23 41
*                    : 30
+                    : 32
,                    : 11
-                    : 29 35
/                    : 31
;                    : 6 7 8
=                    : 15 17
ASSIGN_ADD           : 18
ASSIGN_DIV           : 21
ASSIGN_MULT          : 20
ASSIGN_SUB           : 19
BOOL_AND             : 25
BOOL_OR              : 26
CHAR_LITERAL         : 28
COMMAND_BREAK        : 
COMMAND_PRINT        : 9
COMMAND_RANDOM       : 23
COMMENT              : 
COMP_EQU             : 33
COMP_GTE             : 40
COMP_GTR             : 38
COMP_LESS            : 37
COMP_LTE             : 39
COMP_NEQU            : 34
ID                   : 14 16
STRING_LITERAL       : 
TYPE                 : 24
VAL_LITERAL          : 27
WHITESPACE           : 
error                : 
{                    : 4
}                    : 4

Nonterminals, with rules where they appear

assign_declaration   : 13
declaration          : 7
expression           : 6 10 11 15 17 18 19 20 21 23 25 25 26 26 29 29 30 30 31 31 32 32 33 33 34 34 35 36 37 37 38 38 39 39 40 40 41
non_empty_comma_sep_expr : 9 11
print_statement      : 8
program              : 0
scopeupbro           : 4
simple_declaration   : 12 15
statement            : 3
statements           : 1 3 4
type                 : 14
var_usage            : 17 18 19 20 21 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> .
    (3) statements -> . statements statement

    COMMAND_RANDOM  reduce using rule 2 (statements -> .)
    VAL_LITERAL     reduce using rule 2 (statements -> .)
    CHAR_LITERAL    reduce using rule 2 (statements -> .)
    -               reduce using rule 2 (statements -> .)
    !               reduce using rule 2 (statements -> .)
    (               reduce using rule 2 (statements -> .)
    COMMAND_PRINT   reduce using rule 2 (statements -> .)
    ID              reduce using rule 2 (statements -> .)
    TYPE            reduce using rule 2 (statements -> .)
    {               reduce using rule 2 (statements -> .)
    $end            reduce using rule 2 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . scopeupbro { statements }
    (6) statement -> . expression ;
    (7) statement -> . declaration ;
    (8) statement -> . print_statement ;
    (5) scopeupbro -> .
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (12) declaration -> . simple_declaration
    (13) declaration -> . assign_declaration
    (9) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (16) var_usage -> . ID
    (14) simple_declaration -> . type ID
    (15) assign_declaration -> . simple_declaration = expression
    (24) type -> . TYPE

    $end            reduce using rule 1 (program -> statements .)
    {               reduce using rule 5 (scopeupbro -> .)
    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    COMMAND_PRINT   shift and go to state 11
    ID              shift and go to state 9
    TYPE            shift and go to state 19

    assign_declaration             shift and go to state 13
    type                           shift and go to state 17
    expression                     shift and go to state 5
    statement                      shift and go to state 16
    scopeupbro                     shift and go to state 14
    var_usage                      shift and go to state 7
    print_statement                shift and go to state 18
    simple_declaration             shift and go to state 8
    declaration                    shift and go to state 10

state 3

    (36) expression -> ! . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 21

state 4

    (28) expression -> CHAR_LITERAL .

    BOOL_AND        reduce using rule 28 (expression -> CHAR_LITERAL .)
    BOOL_OR         reduce using rule 28 (expression -> CHAR_LITERAL .)
    -               reduce using rule 28 (expression -> CHAR_LITERAL .)
    *               reduce using rule 28 (expression -> CHAR_LITERAL .)
    /               reduce using rule 28 (expression -> CHAR_LITERAL .)
    +               reduce using rule 28 (expression -> CHAR_LITERAL .)
    COMP_EQU        reduce using rule 28 (expression -> CHAR_LITERAL .)
    COMP_NEQU       reduce using rule 28 (expression -> CHAR_LITERAL .)
    COMP_LESS       reduce using rule 28 (expression -> CHAR_LITERAL .)
    COMP_GTR        reduce using rule 28 (expression -> CHAR_LITERAL .)
    COMP_LTE        reduce using rule 28 (expression -> CHAR_LITERAL .)
    COMP_GTE        reduce using rule 28 (expression -> CHAR_LITERAL .)
    ;               reduce using rule 28 (expression -> CHAR_LITERAL .)
    )               reduce using rule 28 (expression -> CHAR_LITERAL .)
    ,               reduce using rule 28 (expression -> CHAR_LITERAL .)


state 5

    (6) statement -> expression . ;
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               shift and go to state 26
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23


state 6

    (23) expression -> COMMAND_RANDOM . ( expression )

    (               shift and go to state 35


state 7

    (17) expression -> var_usage . = expression
    (18) expression -> var_usage . ASSIGN_ADD expression
    (19) expression -> var_usage . ASSIGN_SUB expression
    (20) expression -> var_usage . ASSIGN_MULT expression
    (21) expression -> var_usage . ASSIGN_DIV expression
    (22) expression -> var_usage .

    =               shift and go to state 39
    ASSIGN_ADD      shift and go to state 38
    ASSIGN_SUB      shift and go to state 37
    ASSIGN_MULT     shift and go to state 36
    ASSIGN_DIV      shift and go to state 40
    BOOL_AND        reduce using rule 22 (expression -> var_usage .)
    BOOL_OR         reduce using rule 22 (expression -> var_usage .)
    -               reduce using rule 22 (expression -> var_usage .)
    *               reduce using rule 22 (expression -> var_usage .)
    /               reduce using rule 22 (expression -> var_usage .)
    +               reduce using rule 22 (expression -> var_usage .)
    COMP_EQU        reduce using rule 22 (expression -> var_usage .)
    COMP_NEQU       reduce using rule 22 (expression -> var_usage .)
    COMP_LESS       reduce using rule 22 (expression -> var_usage .)
    COMP_GTR        reduce using rule 22 (expression -> var_usage .)
    COMP_LTE        reduce using rule 22 (expression -> var_usage .)
    COMP_GTE        reduce using rule 22 (expression -> var_usage .)
    ;               reduce using rule 22 (expression -> var_usage .)
    )               reduce using rule 22 (expression -> var_usage .)
    ,               reduce using rule 22 (expression -> var_usage .)


state 8

    (12) declaration -> simple_declaration .
    (15) assign_declaration -> simple_declaration . = expression

    ;               reduce using rule 12 (declaration -> simple_declaration .)
    =               shift and go to state 41


state 9

    (16) var_usage -> ID .

    =               reduce using rule 16 (var_usage -> ID .)
    ASSIGN_ADD      reduce using rule 16 (var_usage -> ID .)
    ASSIGN_SUB      reduce using rule 16 (var_usage -> ID .)
    ASSIGN_MULT     reduce using rule 16 (var_usage -> ID .)
    ASSIGN_DIV      reduce using rule 16 (var_usage -> ID .)
    BOOL_AND        reduce using rule 16 (var_usage -> ID .)
    BOOL_OR         reduce using rule 16 (var_usage -> ID .)
    -               reduce using rule 16 (var_usage -> ID .)
    *               reduce using rule 16 (var_usage -> ID .)
    /               reduce using rule 16 (var_usage -> ID .)
    +               reduce using rule 16 (var_usage -> ID .)
    COMP_EQU        reduce using rule 16 (var_usage -> ID .)
    COMP_NEQU       reduce using rule 16 (var_usage -> ID .)
    COMP_LESS       reduce using rule 16 (var_usage -> ID .)
    COMP_GTR        reduce using rule 16 (var_usage -> ID .)
    COMP_LTE        reduce using rule 16 (var_usage -> ID .)
    COMP_GTE        reduce using rule 16 (var_usage -> ID .)
    ;               reduce using rule 16 (var_usage -> ID .)
    )               reduce using rule 16 (var_usage -> ID .)
    ,               reduce using rule 16 (var_usage -> ID .)


state 10

    (7) statement -> declaration . ;

    ;               shift and go to state 42


state 11

    (9) print_statement -> COMMAND_PRINT . ( non_empty_comma_sep_expr )

    (               shift and go to state 43


state 12

    (41) expression -> ( . expression )
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 44

state 13

    (13) declaration -> assign_declaration .

    ;               reduce using rule 13 (declaration -> assign_declaration .)


state 14

    (4) statement -> scopeupbro . { statements }

    {               shift and go to state 45


state 15

    (27) expression -> VAL_LITERAL .

    BOOL_AND        reduce using rule 27 (expression -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 27 (expression -> VAL_LITERAL .)
    -               reduce using rule 27 (expression -> VAL_LITERAL .)
    *               reduce using rule 27 (expression -> VAL_LITERAL .)
    /               reduce using rule 27 (expression -> VAL_LITERAL .)
    +               reduce using rule 27 (expression -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 27 (expression -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 27 (expression -> VAL_LITERAL .)
    COMP_LESS       reduce using rule 27 (expression -> VAL_LITERAL .)
    COMP_GTR        reduce using rule 27 (expression -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 27 (expression -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 27 (expression -> VAL_LITERAL .)
    ;               reduce using rule 27 (expression -> VAL_LITERAL .)
    )               reduce using rule 27 (expression -> VAL_LITERAL .)
    ,               reduce using rule 27 (expression -> VAL_LITERAL .)


state 16

    (3) statements -> statements statement .

    }               reduce using rule 3 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 3 (statements -> statements statement .)
    CHAR_LITERAL    reduce using rule 3 (statements -> statements statement .)
    -               reduce using rule 3 (statements -> statements statement .)
    !               reduce using rule 3 (statements -> statements statement .)
    (               reduce using rule 3 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    TYPE            reduce using rule 3 (statements -> statements statement .)
    {               reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)


state 17

    (14) simple_declaration -> type . ID

    ID              shift and go to state 46


state 18

    (8) statement -> print_statement . ;

    ;               shift and go to state 47


state 19

    (24) type -> TYPE .

    ID              reduce using rule 24 (type -> TYPE .)


state 20

    (35) expression -> - . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 48

state 21

    (36) expression -> ! expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 36 (expression -> ! expression .)
    BOOL_OR         reduce using rule 36 (expression -> ! expression .)
    -               reduce using rule 36 (expression -> ! expression .)
    *               reduce using rule 36 (expression -> ! expression .)
    /               reduce using rule 36 (expression -> ! expression .)
    +               reduce using rule 36 (expression -> ! expression .)
    COMP_EQU        reduce using rule 36 (expression -> ! expression .)
    COMP_NEQU       reduce using rule 36 (expression -> ! expression .)
    COMP_LESS       reduce using rule 36 (expression -> ! expression .)
    COMP_GTR        reduce using rule 36 (expression -> ! expression .)
    COMP_LTE        reduce using rule 36 (expression -> ! expression .)
    COMP_GTE        reduce using rule 36 (expression -> ! expression .)
    ;               reduce using rule 36 (expression -> ! expression .)
    )               reduce using rule 36 (expression -> ! expression .)
    ,               reduce using rule 36 (expression -> ! expression .)

  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]
  ! +               [ shift and go to state 32 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 22

    (25) expression -> expression BOOL_AND . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 49

state 23

    (40) expression -> expression COMP_GTE . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 50

state 24

    (30) expression -> expression * . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 51

state 25

    (31) expression -> expression / . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 52

state 26

    (6) statement -> expression ; .

    COMMAND_RANDOM  reduce using rule 6 (statement -> expression ; .)
    VAL_LITERAL     reduce using rule 6 (statement -> expression ; .)
    CHAR_LITERAL    reduce using rule 6 (statement -> expression ; .)
    -               reduce using rule 6 (statement -> expression ; .)
    !               reduce using rule 6 (statement -> expression ; .)
    (               reduce using rule 6 (statement -> expression ; .)
    COMMAND_PRINT   reduce using rule 6 (statement -> expression ; .)
    ID              reduce using rule 6 (statement -> expression ; .)
    TYPE            reduce using rule 6 (statement -> expression ; .)
    {               reduce using rule 6 (statement -> expression ; .)
    $end            reduce using rule 6 (statement -> expression ; .)
    }               reduce using rule 6 (statement -> expression ; .)


state 27

    (39) expression -> expression COMP_LTE . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 53

state 28

    (37) expression -> expression COMP_LESS . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 54

state 29

    (38) expression -> expression COMP_GTR . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 55

state 30

    (26) expression -> expression BOOL_OR . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 56

state 31

    (34) expression -> expression COMP_NEQU . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 57

state 32

    (32) expression -> expression + . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 58

state 33

    (33) expression -> expression COMP_EQU . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 59

state 34

    (29) expression -> expression - . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 60

state 35

    (23) expression -> COMMAND_RANDOM ( . expression )
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 61

state 36

    (20) expression -> var_usage ASSIGN_MULT . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 62

state 37

    (19) expression -> var_usage ASSIGN_SUB . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 63

state 38

    (18) expression -> var_usage ASSIGN_ADD . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 64

state 39

    (17) expression -> var_usage = . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 65

state 40

    (21) expression -> var_usage ASSIGN_DIV . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    var_usage                      shift and go to state 7
    expression                     shift and go to state 66

state 41

    (15) assign_declaration -> simple_declaration = . expression
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    expression                     shift and go to state 67
    var_usage                      shift and go to state 7

state 42

    (7) statement -> declaration ; .

    COMMAND_RANDOM  reduce using rule 7 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 7 (statement -> declaration ; .)
    CHAR_LITERAL    reduce using rule 7 (statement -> declaration ; .)
    -               reduce using rule 7 (statement -> declaration ; .)
    !               reduce using rule 7 (statement -> declaration ; .)
    (               reduce using rule 7 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 7 (statement -> declaration ; .)
    ID              reduce using rule 7 (statement -> declaration ; .)
    TYPE            reduce using rule 7 (statement -> declaration ; .)
    {               reduce using rule 7 (statement -> declaration ; .)
    $end            reduce using rule 7 (statement -> declaration ; .)
    }               reduce using rule 7 (statement -> declaration ; .)


state 43

    (9) print_statement -> COMMAND_PRINT ( . non_empty_comma_sep_expr )
    (10) non_empty_comma_sep_expr -> . expression
    (11) non_empty_comma_sep_expr -> . expression , non_empty_comma_sep_expr
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    non_empty_comma_sep_expr       shift and go to state 69
    var_usage                      shift and go to state 7
    expression                     shift and go to state 68

state 44

    (41) expression -> ( expression . )
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    )               shift and go to state 70
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23


state 45

    (4) statement -> scopeupbro { . statements }
    (2) statements -> .
    (3) statements -> . statements statement

    }               reduce using rule 2 (statements -> .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> .)
    VAL_LITERAL     reduce using rule 2 (statements -> .)
    CHAR_LITERAL    reduce using rule 2 (statements -> .)
    -               reduce using rule 2 (statements -> .)
    !               reduce using rule 2 (statements -> .)
    (               reduce using rule 2 (statements -> .)
    COMMAND_PRINT   reduce using rule 2 (statements -> .)
    ID              reduce using rule 2 (statements -> .)
    TYPE            reduce using rule 2 (statements -> .)
    {               reduce using rule 2 (statements -> .)

    statements                     shift and go to state 71

state 46

    (14) simple_declaration -> type ID .

    =               reduce using rule 14 (simple_declaration -> type ID .)
    ;               reduce using rule 14 (simple_declaration -> type ID .)


state 47

    (8) statement -> print_statement ; .

    COMMAND_RANDOM  reduce using rule 8 (statement -> print_statement ; .)
    VAL_LITERAL     reduce using rule 8 (statement -> print_statement ; .)
    CHAR_LITERAL    reduce using rule 8 (statement -> print_statement ; .)
    -               reduce using rule 8 (statement -> print_statement ; .)
    !               reduce using rule 8 (statement -> print_statement ; .)
    (               reduce using rule 8 (statement -> print_statement ; .)
    COMMAND_PRINT   reduce using rule 8 (statement -> print_statement ; .)
    ID              reduce using rule 8 (statement -> print_statement ; .)
    TYPE            reduce using rule 8 (statement -> print_statement ; .)
    {               reduce using rule 8 (statement -> print_statement ; .)
    $end            reduce using rule 8 (statement -> print_statement ; .)
    }               reduce using rule 8 (statement -> print_statement ; .)


state 48

    (35) expression -> - expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 35 (expression -> - expression .)
    BOOL_OR         reduce using rule 35 (expression -> - expression .)
    -               reduce using rule 35 (expression -> - expression .)
    *               reduce using rule 35 (expression -> - expression .)
    /               reduce using rule 35 (expression -> - expression .)
    +               reduce using rule 35 (expression -> - expression .)
    COMP_EQU        reduce using rule 35 (expression -> - expression .)
    COMP_NEQU       reduce using rule 35 (expression -> - expression .)
    COMP_LESS       reduce using rule 35 (expression -> - expression .)
    COMP_GTR        reduce using rule 35 (expression -> - expression .)
    COMP_LTE        reduce using rule 35 (expression -> - expression .)
    COMP_GTE        reduce using rule 35 (expression -> - expression .)
    ;               reduce using rule 35 (expression -> - expression .)
    )               reduce using rule 35 (expression -> - expression .)
    ,               reduce using rule 35 (expression -> - expression .)

  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]
  ! +               [ shift and go to state 32 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 49

    (25) expression -> expression BOOL_AND expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 25 (expression -> expression BOOL_AND expression .)
    BOOL_OR         reduce using rule 25 (expression -> expression BOOL_AND expression .)
    ;               reduce using rule 25 (expression -> expression BOOL_AND expression .)
    )               reduce using rule 25 (expression -> expression BOOL_AND expression .)
    ,               reduce using rule 25 (expression -> expression BOOL_AND expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! -               [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! +               [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! COMP_EQU        [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! COMP_NEQU       [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! COMP_LESS       [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! COMP_GTR        [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! COMP_LTE        [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! COMP_GTE        [ reduce using rule 25 (expression -> expression BOOL_AND expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]


state 50

    (40) expression -> expression COMP_GTE expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 40 (expression -> expression COMP_GTE expression .)
    BOOL_OR         reduce using rule 40 (expression -> expression COMP_GTE expression .)
    COMP_EQU        reduce using rule 40 (expression -> expression COMP_GTE expression .)
    COMP_NEQU       reduce using rule 40 (expression -> expression COMP_GTE expression .)
    COMP_LESS       reduce using rule 40 (expression -> expression COMP_GTE expression .)
    COMP_GTR        reduce using rule 40 (expression -> expression COMP_GTE expression .)
    COMP_LTE        reduce using rule 40 (expression -> expression COMP_GTE expression .)
    COMP_GTE        reduce using rule 40 (expression -> expression COMP_GTE expression .)
    ;               reduce using rule 40 (expression -> expression COMP_GTE expression .)
    )               reduce using rule 40 (expression -> expression COMP_GTE expression .)
    ,               reduce using rule 40 (expression -> expression COMP_GTE expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32

  ! -               [ reduce using rule 40 (expression -> expression COMP_GTE expression .) ]
  ! *               [ reduce using rule 40 (expression -> expression COMP_GTE expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression COMP_GTE expression .) ]
  ! +               [ reduce using rule 40 (expression -> expression COMP_GTE expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 51

    (30) expression -> expression * expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 30 (expression -> expression * expression .)
    BOOL_OR         reduce using rule 30 (expression -> expression * expression .)
    -               reduce using rule 30 (expression -> expression * expression .)
    *               reduce using rule 30 (expression -> expression * expression .)
    /               reduce using rule 30 (expression -> expression * expression .)
    +               reduce using rule 30 (expression -> expression * expression .)
    COMP_EQU        reduce using rule 30 (expression -> expression * expression .)
    COMP_NEQU       reduce using rule 30 (expression -> expression * expression .)
    COMP_LESS       reduce using rule 30 (expression -> expression * expression .)
    COMP_GTR        reduce using rule 30 (expression -> expression * expression .)
    COMP_LTE        reduce using rule 30 (expression -> expression * expression .)
    COMP_GTE        reduce using rule 30 (expression -> expression * expression .)
    ;               reduce using rule 30 (expression -> expression * expression .)
    )               reduce using rule 30 (expression -> expression * expression .)
    ,               reduce using rule 30 (expression -> expression * expression .)

  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]
  ! +               [ shift and go to state 32 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 52

    (31) expression -> expression / expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 31 (expression -> expression / expression .)
    BOOL_OR         reduce using rule 31 (expression -> expression / expression .)
    -               reduce using rule 31 (expression -> expression / expression .)
    *               reduce using rule 31 (expression -> expression / expression .)
    /               reduce using rule 31 (expression -> expression / expression .)
    +               reduce using rule 31 (expression -> expression / expression .)
    COMP_EQU        reduce using rule 31 (expression -> expression / expression .)
    COMP_NEQU       reduce using rule 31 (expression -> expression / expression .)
    COMP_LESS       reduce using rule 31 (expression -> expression / expression .)
    COMP_GTR        reduce using rule 31 (expression -> expression / expression .)
    COMP_LTE        reduce using rule 31 (expression -> expression / expression .)
    COMP_GTE        reduce using rule 31 (expression -> expression / expression .)
    ;               reduce using rule 31 (expression -> expression / expression .)
    )               reduce using rule 31 (expression -> expression / expression .)
    ,               reduce using rule 31 (expression -> expression / expression .)

  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]
  ! +               [ shift and go to state 32 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 53

    (39) expression -> expression COMP_LTE expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    BOOL_OR         reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_EQU        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_NEQU       reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_LESS       reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_GTR        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_LTE        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    COMP_GTE        reduce using rule 39 (expression -> expression COMP_LTE expression .)
    ;               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    )               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    ,               reduce using rule 39 (expression -> expression COMP_LTE expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32

  ! -               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! *               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! +               [ reduce using rule 39 (expression -> expression COMP_LTE expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 54

    (37) expression -> expression COMP_LESS expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 37 (expression -> expression COMP_LESS expression .)
    BOOL_OR         reduce using rule 37 (expression -> expression COMP_LESS expression .)
    COMP_EQU        reduce using rule 37 (expression -> expression COMP_LESS expression .)
    COMP_NEQU       reduce using rule 37 (expression -> expression COMP_LESS expression .)
    COMP_LESS       reduce using rule 37 (expression -> expression COMP_LESS expression .)
    COMP_GTR        reduce using rule 37 (expression -> expression COMP_LESS expression .)
    COMP_LTE        reduce using rule 37 (expression -> expression COMP_LESS expression .)
    COMP_GTE        reduce using rule 37 (expression -> expression COMP_LESS expression .)
    ;               reduce using rule 37 (expression -> expression COMP_LESS expression .)
    )               reduce using rule 37 (expression -> expression COMP_LESS expression .)
    ,               reduce using rule 37 (expression -> expression COMP_LESS expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32

  ! -               [ reduce using rule 37 (expression -> expression COMP_LESS expression .) ]
  ! *               [ reduce using rule 37 (expression -> expression COMP_LESS expression .) ]
  ! /               [ reduce using rule 37 (expression -> expression COMP_LESS expression .) ]
  ! +               [ reduce using rule 37 (expression -> expression COMP_LESS expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 55

    (38) expression -> expression COMP_GTR expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 38 (expression -> expression COMP_GTR expression .)
    BOOL_OR         reduce using rule 38 (expression -> expression COMP_GTR expression .)
    COMP_EQU        reduce using rule 38 (expression -> expression COMP_GTR expression .)
    COMP_NEQU       reduce using rule 38 (expression -> expression COMP_GTR expression .)
    COMP_LESS       reduce using rule 38 (expression -> expression COMP_GTR expression .)
    COMP_GTR        reduce using rule 38 (expression -> expression COMP_GTR expression .)
    COMP_LTE        reduce using rule 38 (expression -> expression COMP_GTR expression .)
    COMP_GTE        reduce using rule 38 (expression -> expression COMP_GTR expression .)
    ;               reduce using rule 38 (expression -> expression COMP_GTR expression .)
    )               reduce using rule 38 (expression -> expression COMP_GTR expression .)
    ,               reduce using rule 38 (expression -> expression COMP_GTR expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32

  ! -               [ reduce using rule 38 (expression -> expression COMP_GTR expression .) ]
  ! *               [ reduce using rule 38 (expression -> expression COMP_GTR expression .) ]
  ! /               [ reduce using rule 38 (expression -> expression COMP_GTR expression .) ]
  ! +               [ reduce using rule 38 (expression -> expression COMP_GTR expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 56

    (26) expression -> expression BOOL_OR expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_OR         reduce using rule 26 (expression -> expression BOOL_OR expression .)
    ;               reduce using rule 26 (expression -> expression BOOL_OR expression .)
    )               reduce using rule 26 (expression -> expression BOOL_OR expression .)
    ,               reduce using rule 26 (expression -> expression BOOL_OR expression .)
    BOOL_AND        shift and go to state 22
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! BOOL_AND        [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! +               [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! COMP_EQU        [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! COMP_NEQU       [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! COMP_LESS       [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! COMP_GTR        [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! COMP_LTE        [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! COMP_GTE        [ reduce using rule 26 (expression -> expression BOOL_OR expression .) ]
  ! BOOL_OR         [ shift and go to state 30 ]


state 57

    (34) expression -> expression COMP_NEQU expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    BOOL_OR         reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    COMP_EQU        reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    COMP_NEQU       reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    COMP_LESS       reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    COMP_GTR        reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    COMP_LTE        reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    COMP_GTE        reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    ;               reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    )               reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    ,               reduce using rule 34 (expression -> expression COMP_NEQU expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32

  ! -               [ reduce using rule 34 (expression -> expression COMP_NEQU expression .) ]
  ! *               [ reduce using rule 34 (expression -> expression COMP_NEQU expression .) ]
  ! /               [ reduce using rule 34 (expression -> expression COMP_NEQU expression .) ]
  ! +               [ reduce using rule 34 (expression -> expression COMP_NEQU expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 58

    (32) expression -> expression + expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 32 (expression -> expression + expression .)
    BOOL_OR         reduce using rule 32 (expression -> expression + expression .)
    -               reduce using rule 32 (expression -> expression + expression .)
    +               reduce using rule 32 (expression -> expression + expression .)
    COMP_EQU        reduce using rule 32 (expression -> expression + expression .)
    COMP_NEQU       reduce using rule 32 (expression -> expression + expression .)
    COMP_LESS       reduce using rule 32 (expression -> expression + expression .)
    COMP_GTR        reduce using rule 32 (expression -> expression + expression .)
    COMP_LTE        reduce using rule 32 (expression -> expression + expression .)
    COMP_GTE        reduce using rule 32 (expression -> expression + expression .)
    ;               reduce using rule 32 (expression -> expression + expression .)
    )               reduce using rule 32 (expression -> expression + expression .)
    ,               reduce using rule 32 (expression -> expression + expression .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 32 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 32 (expression -> expression + expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! -               [ shift and go to state 34 ]
  ! +               [ shift and go to state 32 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 59

    (33) expression -> expression COMP_EQU expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 33 (expression -> expression COMP_EQU expression .)
    BOOL_OR         reduce using rule 33 (expression -> expression COMP_EQU expression .)
    COMP_EQU        reduce using rule 33 (expression -> expression COMP_EQU expression .)
    COMP_NEQU       reduce using rule 33 (expression -> expression COMP_EQU expression .)
    COMP_LESS       reduce using rule 33 (expression -> expression COMP_EQU expression .)
    COMP_GTR        reduce using rule 33 (expression -> expression COMP_EQU expression .)
    COMP_LTE        reduce using rule 33 (expression -> expression COMP_EQU expression .)
    COMP_GTE        reduce using rule 33 (expression -> expression COMP_EQU expression .)
    ;               reduce using rule 33 (expression -> expression COMP_EQU expression .)
    )               reduce using rule 33 (expression -> expression COMP_EQU expression .)
    ,               reduce using rule 33 (expression -> expression COMP_EQU expression .)
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32

  ! -               [ reduce using rule 33 (expression -> expression COMP_EQU expression .) ]
  ! *               [ reduce using rule 33 (expression -> expression COMP_EQU expression .) ]
  ! /               [ reduce using rule 33 (expression -> expression COMP_EQU expression .) ]
  ! +               [ reduce using rule 33 (expression -> expression COMP_EQU expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 60

    (29) expression -> expression - expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    BOOL_AND        reduce using rule 29 (expression -> expression - expression .)
    BOOL_OR         reduce using rule 29 (expression -> expression - expression .)
    -               reduce using rule 29 (expression -> expression - expression .)
    +               reduce using rule 29 (expression -> expression - expression .)
    COMP_EQU        reduce using rule 29 (expression -> expression - expression .)
    COMP_NEQU       reduce using rule 29 (expression -> expression - expression .)
    COMP_LESS       reduce using rule 29 (expression -> expression - expression .)
    COMP_GTR        reduce using rule 29 (expression -> expression - expression .)
    COMP_LTE        reduce using rule 29 (expression -> expression - expression .)
    COMP_GTE        reduce using rule 29 (expression -> expression - expression .)
    ;               reduce using rule 29 (expression -> expression - expression .)
    )               reduce using rule 29 (expression -> expression - expression .)
    ,               reduce using rule 29 (expression -> expression - expression .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! BOOL_AND        [ shift and go to state 22 ]
  ! BOOL_OR         [ shift and go to state 30 ]
  ! -               [ shift and go to state 34 ]
  ! +               [ shift and go to state 32 ]
  ! COMP_EQU        [ shift and go to state 33 ]
  ! COMP_NEQU       [ shift and go to state 31 ]
  ! COMP_LESS       [ shift and go to state 28 ]
  ! COMP_GTR        [ shift and go to state 29 ]
  ! COMP_LTE        [ shift and go to state 27 ]
  ! COMP_GTE        [ shift and go to state 23 ]


state 61

    (23) expression -> COMMAND_RANDOM ( expression . )
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    )               shift and go to state 72
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23


state 62

    (20) expression -> var_usage ASSIGN_MULT expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .)
    )               reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .)
    ,               reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .)
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! BOOL_AND        [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! BOOL_OR         [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! -               [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! *               [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! /               [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! +               [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_EQU        [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_NEQU       [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_LESS       [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_GTR        [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_LTE        [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]
  ! COMP_GTE        [ reduce using rule 20 (expression -> var_usage ASSIGN_MULT expression .) ]


state 63

    (19) expression -> var_usage ASSIGN_SUB expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .)
    )               reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .)
    ,               reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .)
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! BOOL_AND        [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! BOOL_OR         [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! -               [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! *               [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! /               [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! +               [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_EQU        [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_NEQU       [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_LESS       [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_GTR        [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_LTE        [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]
  ! COMP_GTE        [ reduce using rule 19 (expression -> var_usage ASSIGN_SUB expression .) ]


state 64

    (18) expression -> var_usage ASSIGN_ADD expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .)
    )               reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .)
    ,               reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .)
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! BOOL_AND        [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! BOOL_OR         [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! -               [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! *               [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! /               [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! +               [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_EQU        [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_NEQU       [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_LESS       [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_GTR        [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_LTE        [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]
  ! COMP_GTE        [ reduce using rule 18 (expression -> var_usage ASSIGN_ADD expression .) ]


state 65

    (17) expression -> var_usage = expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               reduce using rule 17 (expression -> var_usage = expression .)
    )               reduce using rule 17 (expression -> var_usage = expression .)
    ,               reduce using rule 17 (expression -> var_usage = expression .)
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! BOOL_AND        [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! BOOL_OR         [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! -               [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! *               [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! /               [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! +               [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! COMP_EQU        [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! COMP_NEQU       [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! COMP_LESS       [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! COMP_GTR        [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! COMP_LTE        [ reduce using rule 17 (expression -> var_usage = expression .) ]
  ! COMP_GTE        [ reduce using rule 17 (expression -> var_usage = expression .) ]


state 66

    (21) expression -> var_usage ASSIGN_DIV expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .)
    )               reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .)
    ,               reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .)
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23

  ! BOOL_AND        [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! BOOL_OR         [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! -               [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! *               [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! /               [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! +               [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_EQU        [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_NEQU       [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_LESS       [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_GTR        [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_LTE        [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]
  ! COMP_GTE        [ reduce using rule 21 (expression -> var_usage ASSIGN_DIV expression .) ]


state 67

    (15) assign_declaration -> simple_declaration = expression .
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    ;               reduce using rule 15 (assign_declaration -> simple_declaration = expression .)
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23


state 68

    (10) non_empty_comma_sep_expr -> expression .
    (11) non_empty_comma_sep_expr -> expression . , non_empty_comma_sep_expr
    (25) expression -> expression . BOOL_AND expression
    (26) expression -> expression . BOOL_OR expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . + expression
    (33) expression -> expression . COMP_EQU expression
    (34) expression -> expression . COMP_NEQU expression
    (37) expression -> expression . COMP_LESS expression
    (38) expression -> expression . COMP_GTR expression
    (39) expression -> expression . COMP_LTE expression
    (40) expression -> expression . COMP_GTE expression

    )               reduce using rule 10 (non_empty_comma_sep_expr -> expression .)
    ,               shift and go to state 73
    BOOL_AND        shift and go to state 22
    BOOL_OR         shift and go to state 30
    -               shift and go to state 34
    *               shift and go to state 24
    /               shift and go to state 25
    +               shift and go to state 32
    COMP_EQU        shift and go to state 33
    COMP_NEQU       shift and go to state 31
    COMP_LESS       shift and go to state 28
    COMP_GTR        shift and go to state 29
    COMP_LTE        shift and go to state 27
    COMP_GTE        shift and go to state 23


state 69

    (9) print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr . )

    )               shift and go to state 74


state 70

    (41) expression -> ( expression ) .

    BOOL_AND        reduce using rule 41 (expression -> ( expression ) .)
    BOOL_OR         reduce using rule 41 (expression -> ( expression ) .)
    -               reduce using rule 41 (expression -> ( expression ) .)
    *               reduce using rule 41 (expression -> ( expression ) .)
    /               reduce using rule 41 (expression -> ( expression ) .)
    +               reduce using rule 41 (expression -> ( expression ) .)
    COMP_EQU        reduce using rule 41 (expression -> ( expression ) .)
    COMP_NEQU       reduce using rule 41 (expression -> ( expression ) .)
    COMP_LESS       reduce using rule 41 (expression -> ( expression ) .)
    COMP_GTR        reduce using rule 41 (expression -> ( expression ) .)
    COMP_LTE        reduce using rule 41 (expression -> ( expression ) .)
    COMP_GTE        reduce using rule 41 (expression -> ( expression ) .)
    ;               reduce using rule 41 (expression -> ( expression ) .)
    )               reduce using rule 41 (expression -> ( expression ) .)
    ,               reduce using rule 41 (expression -> ( expression ) .)


state 71

    (4) statement -> scopeupbro { statements . }
    (3) statements -> statements . statement
    (4) statement -> . scopeupbro { statements }
    (6) statement -> . expression ;
    (7) statement -> . declaration ;
    (8) statement -> . print_statement ;
    (5) scopeupbro -> .
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (12) declaration -> . simple_declaration
    (13) declaration -> . assign_declaration
    (9) print_statement -> . COMMAND_PRINT ( non_empty_comma_sep_expr )
    (16) var_usage -> . ID
    (14) simple_declaration -> . type ID
    (15) assign_declaration -> . simple_declaration = expression
    (24) type -> . TYPE

    }               shift and go to state 75
    {               reduce using rule 5 (scopeupbro -> .)
    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    COMMAND_PRINT   shift and go to state 11
    ID              shift and go to state 9
    TYPE            shift and go to state 19

    assign_declaration             shift and go to state 13
    type                           shift and go to state 17
    expression                     shift and go to state 5
    statement                      shift and go to state 16
    scopeupbro                     shift and go to state 14
    var_usage                      shift and go to state 7
    print_statement                shift and go to state 18
    simple_declaration             shift and go to state 8
    declaration                    shift and go to state 10

state 72

    (23) expression -> COMMAND_RANDOM ( expression ) .

    BOOL_AND        reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    BOOL_OR         reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    -               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    *               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    /               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    +               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_EQU        reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_NEQU       reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_LESS       reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_GTR        reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_LTE        reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    COMP_GTE        reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    ;               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    )               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)
    ,               reduce using rule 23 (expression -> COMMAND_RANDOM ( expression ) .)


state 73

    (11) non_empty_comma_sep_expr -> expression , . non_empty_comma_sep_expr
    (10) non_empty_comma_sep_expr -> . expression
    (11) non_empty_comma_sep_expr -> . expression , non_empty_comma_sep_expr
    (17) expression -> . var_usage = expression
    (18) expression -> . var_usage ASSIGN_ADD expression
    (19) expression -> . var_usage ASSIGN_SUB expression
    (20) expression -> . var_usage ASSIGN_MULT expression
    (21) expression -> . var_usage ASSIGN_DIV expression
    (22) expression -> . var_usage
    (23) expression -> . COMMAND_RANDOM ( expression )
    (25) expression -> . expression BOOL_AND expression
    (26) expression -> . expression BOOL_OR expression
    (27) expression -> . VAL_LITERAL
    (28) expression -> . CHAR_LITERAL
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression + expression
    (33) expression -> . expression COMP_EQU expression
    (34) expression -> . expression COMP_NEQU expression
    (35) expression -> . - expression
    (36) expression -> . ! expression
    (37) expression -> . expression COMP_LESS expression
    (38) expression -> . expression COMP_GTR expression
    (39) expression -> . expression COMP_LTE expression
    (40) expression -> . expression COMP_GTE expression
    (41) expression -> . ( expression )
    (16) var_usage -> . ID

    COMMAND_RANDOM  shift and go to state 6
    VAL_LITERAL     shift and go to state 15
    CHAR_LITERAL    shift and go to state 4
    -               shift and go to state 20
    !               shift and go to state 3
    (               shift and go to state 12
    ID              shift and go to state 9

    non_empty_comma_sep_expr       shift and go to state 76
    var_usage                      shift and go to state 7
    expression                     shift and go to state 68

state 74

    (9) print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr ) .

    ;               reduce using rule 9 (print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr ) .)


state 75

    (4) statement -> scopeupbro { statements } .

    COMMAND_RANDOM  reduce using rule 4 (statement -> scopeupbro { statements } .)
    VAL_LITERAL     reduce using rule 4 (statement -> scopeupbro { statements } .)
    CHAR_LITERAL    reduce using rule 4 (statement -> scopeupbro { statements } .)
    -               reduce using rule 4 (statement -> scopeupbro { statements } .)
    !               reduce using rule 4 (statement -> scopeupbro { statements } .)
    (               reduce using rule 4 (statement -> scopeupbro { statements } .)
    COMMAND_PRINT   reduce using rule 4 (statement -> scopeupbro { statements } .)
    ID              reduce using rule 4 (statement -> scopeupbro { statements } .)
    TYPE            reduce using rule 4 (statement -> scopeupbro { statements } .)
    {               reduce using rule 4 (statement -> scopeupbro { statements } .)
    $end            reduce using rule 4 (statement -> scopeupbro { statements } .)
    }               reduce using rule 4 (statement -> scopeupbro { statements } .)


state 76

    (11) non_empty_comma_sep_expr -> expression , non_empty_comma_sep_expr .

    )               reduce using rule 11 (non_empty_comma_sep_expr -> expression , non_empty_comma_sep_expr .)

