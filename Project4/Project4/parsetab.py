
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=ASSIGN_ADDASSIGN_SUBASSIGN_MULTASSIGN_DIVleftBOOL_ORleftBOOL_ANDnonassocCOMP_EQUCOMP_NEQUCOMP_LESSCOMP_LTECOMP_GTRCOMP_GTEleft+-left*/nonassocUNARY_MINUSnonassocUNARY_NOTID VAL_LITERAL CHAR_LITERAL STRING_LITERAL ASSIGN_ADD ASSIGN_SUB ASSIGN_MULT ASSIGN_DIV COMP_EQU COMP_NEQU COMP_LESS COMP_LTE COMP_GTR COMP_GTE BOOL_AND BOOL_OR WHITESPACE COMMENT TYPE COMMAND_BREAK COMMAND_PRINT COMMAND_RANDOM\n    program : statements\n    \n    statements :\n    \n    statements : statements statement \n    \n    statement : scopeupbro '{' statements '}' \n    \n    scopeupbro :\n    \n    statement : expression ';'\n    \n    statement : declaration ';'\n            | print_statement ';'\n    \n    print_statement : COMMAND_PRINT '(' non_empty_comma_sep_expr ')'\n    \n    non_empty_comma_sep_expr : expression\n    \n    non_empty_comma_sep_expr : expression ',' non_empty_comma_sep_expr\n    \n    declaration : simple_declaration\n                | assign_declaration\n    \n    simple_declaration : type ID\n    \n    assign_declaration : simple_declaration '=' expression\n    \n    var_usage : ID\n    \n    expression : var_usage '=' expression\n    \n    expression : var_usage ASSIGN_ADD expression\n    \n    expression : var_usage ASSIGN_SUB expression\n    \n    expression : var_usage ASSIGN_MULT expression\n    \n    expression : var_usage ASSIGN_DIV expression\n    \n    expression : var_usage\n    \n    expression : COMMAND_RANDOM '(' expression ')'\n    \n    type : TYPE\n    \n    expression : expression BOOL_AND expression\n    \n    expression : expression BOOL_OR expression\n    \n    expression : VAL_LITERAL\n    \n    expression : CHAR_LITERAL\n    \n    expression : expression '-' expression\n    \n    expression : expression '*' expression\n    \n    expression : expression '/' expression\n    \n    expression : expression '+' expression\n    \n    expression : expression COMP_EQU expression\n    \n    expression : expression COMP_NEQU expression\n    \n    expression : '-' expression %prec UNARY_MINUS\n    \n    expression : '!' expression %prec UNARY_NOT\n    \n    expression : expression COMP_LESS expression\n    \n    expression : expression COMP_GTR expression\n    \n    expression : expression COMP_LTE expression\n    \n    expression : expression COMP_GTE expression\n    \n    expression : '(' expression ')'\n    "
    
_lr_action_items = {'BOOL_AND':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,22,-22,-16,-27,-36,22,-35,-25,-40,-30,-31,-39,-37,-38,22,-34,-32,-33,-29,22,22,22,22,22,22,22,22,-41,-23,]),'!':([0,2,3,12,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,71,73,75,],[-2,3,3,3,-3,3,3,3,3,3,-6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-7,3,-2,-8,3,3,-4,]),'*':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,24,-22,-16,-27,-36,24,-35,24,24,-30,-31,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-41,-23,]),'CHAR_LITERAL':([0,2,3,12,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,71,73,75,],[-2,4,4,4,-3,4,4,4,4,4,-6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-7,4,-2,-8,4,4,-4,]),'ASSIGN_MULT':([7,9,],[36,-16,]),'COMMAND_RANDOM':([0,2,3,12,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,71,73,75,],[-2,6,6,6,-3,6,6,6,6,6,-6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-7,6,-2,-8,6,6,-4,]),'ID':([0,2,3,12,16,17,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,71,73,75,],[-2,9,9,9,-3,46,-24,9,9,9,9,9,-6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-7,9,-2,-8,9,9,-4,]),')':([4,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,72,76,],[-28,-22,-16,-27,-36,70,-35,-25,-40,-30,-31,-39,-37,-38,-26,-34,-32,-33,-29,72,-20,-19,-18,-17,-21,-10,74,-41,-23,-11,]),'COMP_GTR':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,29,-22,-16,-27,-36,29,-35,29,None,-30,-31,None,None,None,29,None,-32,None,-29,29,29,29,29,29,29,29,29,-41,-23,]),'BOOL_OR':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,30,-22,-16,-27,-36,30,-35,-25,-40,-30,-31,-39,-37,-38,-26,-34,-32,-33,-29,30,30,30,30,30,30,30,30,-41,-23,]),'TYPE':([0,2,16,26,42,45,47,71,75,],[-2,19,-3,-6,-7,-2,-8,19,-4,]),'/':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,25,-22,-16,-27,-36,25,-35,25,25,-30,-31,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-41,-23,]),'}':([16,26,42,45,47,71,75,],[-3,-6,-7,-2,-8,75,-4,]),'ASSIGN_ADD':([7,9,],[38,-16,]),'(':([0,2,3,6,11,12,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,71,73,75,],[-2,12,12,35,43,12,-3,12,12,12,12,12,-6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-7,12,-2,-8,12,12,-4,]),'COMP_LESS':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,28,-22,-16,-27,-36,28,-35,28,None,-30,-31,None,None,None,28,None,-32,None,-29,28,28,28,28,28,28,28,28,-41,-23,]),'COMMAND_PRINT':([0,2,16,26,42,45,47,71,75,],[-2,11,-3,-6,-7,-2,-8,11,-4,]),';':([4,5,7,8,9,10,13,15,18,21,46,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,70,72,74,],[-28,26,-22,-12,-16,42,-13,-27,47,-36,-14,-35,-25,-40,-30,-31,-39,-37,-38,-26,-34,-32,-33,-29,-20,-19,-18,-17,-21,-15,-41,-23,-9,]),'VAL_LITERAL':([0,2,3,12,16,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,71,73,75,],[-2,15,15,15,-3,15,15,15,15,15,-6,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-7,15,-2,-8,15,15,-4,]),',':([4,7,9,15,21,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,68,70,72,],[-28,-22,-16,-27,-36,-35,-25,-40,-30,-31,-39,-37,-38,-26,-34,-32,-33,-29,-20,-19,-18,-17,-21,73,-41,-23,]),'COMP_LTE':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,27,-22,-16,-27,-36,27,-35,27,None,-30,-31,None,None,None,27,None,-32,None,-29,27,27,27,27,27,27,27,27,-41,-23,]),'$end':([0,1,2,16,26,42,47,75,],[-2,0,-1,-3,-6,-7,-8,-4,]),'-':([0,2,3,4,5,7,9,12,15,16,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,75,],[-2,20,20,-28,34,-22,-16,20,-27,-3,20,-36,20,20,20,20,-6,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-7,20,34,-2,-8,-35,34,34,-30,-31,34,34,34,34,34,-32,34,-29,34,34,34,34,34,34,34,34,-41,20,-23,20,-4,]),'=':([7,8,9,46,],[39,41,-16,-14,]),'+':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,32,-22,-16,-27,-36,32,-35,32,32,-30,-31,32,32,32,32,32,-32,32,-29,32,32,32,32,32,32,32,32,-41,-23,]),'ASSIGN_SUB':([7,9,],[37,-16,]),'COMP_GTE':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,23,-22,-16,-27,-36,23,-35,23,None,-30,-31,None,None,None,23,None,-32,None,-29,23,23,23,23,23,23,23,23,-41,-23,]),'COMP_NEQU':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,31,-22,-16,-27,-36,31,-35,31,None,-30,-31,None,None,None,31,None,-32,None,-29,31,31,31,31,31,31,31,31,-41,-23,]),'{':([0,2,14,16,26,42,45,47,71,75,],[-2,-5,45,-3,-6,-7,-2,-8,-5,-4,]),'COMP_EQU':([4,5,7,9,15,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,],[-28,33,-22,-16,-27,-36,33,-35,33,None,-30,-31,None,None,None,33,None,-32,None,-29,33,33,33,33,33,33,33,33,-41,-23,]),'ASSIGN_DIV':([7,9,],[40,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assign_declaration':([2,71,],[13,13,]),'simple_declaration':([2,71,],[8,8,]),'program':([0,],[1,]),'expression':([2,3,12,20,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,71,73,],[5,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,5,68,]),'var_usage':([2,3,12,20,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,71,73,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'print_statement':([2,71,],[18,18,]),'non_empty_comma_sep_expr':([43,73,],[69,76,]),'statements':([0,45,],[2,71,]),'scopeupbro':([2,71,],[14,14,]),'type':([2,71,],[17,17,]),'statement':([2,71,],[16,16,]),'declaration':([2,71,],[10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yaccy.py',24),
  ('statements -> <empty>','statements',0,'p_zero_statements','yaccy.py',30),
  ('statements -> statements statement','statements',2,'p_statements','yaccy.py',36),
  ('statement -> scopeupbro { statements }','statement',4,'p_block_baby','yaccy.py',44),
  ('scopeupbro -> <empty>','scopeupbro',0,'p_scope_up_bro','yaccy.py',56),
  ('statement -> expression ;','statement',2,'p_statement','yaccy.py',66),
  ('statement -> declaration ;','statement',2,'p_declaration_statement','yaccy.py',72),
  ('statement -> print_statement ;','statement',2,'p_declaration_statement','yaccy.py',73),
  ('print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr )','print_statement',4,'p_print_statement','yaccy.py',79),
  ('non_empty_comma_sep_expr -> expression','non_empty_comma_sep_expr',1,'p_comma_sep_expression_1','yaccy.py',86),
  ('non_empty_comma_sep_expr -> expression , non_empty_comma_sep_expr','non_empty_comma_sep_expr',3,'p_comma_sep_expression_many','yaccy.py',93),
  ('declaration -> simple_declaration','declaration',1,'p_declaration','yaccy.py',100),
  ('declaration -> assign_declaration','declaration',1,'p_declaration','yaccy.py',101),
  ('simple_declaration -> type ID','simple_declaration',2,'p_simple_declaration','yaccy.py',108),
  ('assign_declaration -> simple_declaration = expression','assign_declaration',3,'p_assign_declaration','yaccy.py',120),
  ('var_usage -> ID','var_usage',1,'p_var_usage','yaccy.py',126),
  ('expression -> var_usage = expression','expression',3,'p_assignment','yaccy.py',132),
  ('expression -> var_usage ASSIGN_ADD expression','expression',3,'p_add_assign','yaccy.py',138),
  ('expression -> var_usage ASSIGN_SUB expression','expression',3,'p_sub_assign','yaccy.py',145),
  ('expression -> var_usage ASSIGN_MULT expression','expression',3,'p_mult_assign','yaccy.py',152),
  ('expression -> var_usage ASSIGN_DIV expression','expression',3,'p_div_assign','yaccy.py',159),
  ('expression -> var_usage','expression',1,'p_var_usage_value','yaccy.py',166),
  ('expression -> COMMAND_RANDOM ( expression )','expression',4,'p_random_call','yaccy.py',172),
  ('type -> TYPE','type',1,'p_type','yaccy.py',178),
  ('expression -> expression BOOL_AND expression','expression',3,'p_boolean_and','yaccy.py',184),
  ('expression -> expression BOOL_OR expression','expression',3,'p_boolean_or','yaccy.py',190),
  ('expression -> VAL_LITERAL','expression',1,'p_val_literal_expression','yaccy.py',197),
  ('expression -> CHAR_LITERAL','expression',1,'p_char_literal_expression','yaccy.py',203),
  ('expression -> expression - expression','expression',3,'p_arithmetic_expression_sub','yaccy.py',210),
  ('expression -> expression * expression','expression',3,'p_arithmetic_expression_mult','yaccy.py',216),
  ('expression -> expression / expression','expression',3,'p_arithmetic_expression_div','yaccy.py',223),
  ('expression -> expression + expression','expression',3,'p_arithmetic_expression_add','yaccy.py',230),
  ('expression -> expression COMP_EQU expression','expression',3,'p_boolean_expression_equality','yaccy.py',236),
  ('expression -> expression COMP_NEQU expression','expression',3,'p_boolean_expression_inequality','yaccy.py',242),
  ('expression -> - expression','expression',2,'p_arithmetic_expression_negation','yaccy.py',248),
  ('expression -> ! expression','expression',2,'p_boolean_expression_negation','yaccy.py',254),
  ('expression -> expression COMP_LESS expression','expression',3,'p_boolean_expression_less_than','yaccy.py',260),
  ('expression -> expression COMP_GTR expression','expression',3,'p_boolean_expression_greater_than','yaccy.py',266),
  ('expression -> expression COMP_LTE expression','expression',3,'p_boolean_expression_less_than_equal','yaccy.py',272),
  ('expression -> expression COMP_GTE expression','expression',3,'p_boolean_expression_greater_than_equal','yaccy.py',278),
  ('expression -> ( expression )','expression',3,'p_paren_expression','yaccy.py',284),
]
