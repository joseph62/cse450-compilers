Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STRING_LITERAL
    UNKNOWN
    CHAR_LITERAL
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> <empty>
Rule 3     statements -> statements statement
Rule 4     statement -> declaration ;
Rule 5     expression -> assignment
Rule 6     expression -> usage
Rule 7     expression -> function
Rule 8     function -> COMMAND_PRINT ( list )
Rule 9     function -> COMMAND_RANDOM ( nonempty_list )
Rule 10    list -> empty_list
Rule 11    list -> nonempty_list
Rule 12    nonempty_list -> expression , list
Rule 13    nonempty_list -> expression
Rule 14    empty_list -> <empty>
Rule 15    declaration -> TYPE ID
Rule 16    assignment -> ID = expression
Rule 17    declaration -> TYPE ID = expression
Rule 18    assignment -> ID ASSIGN_ADD expression
Rule 19    assignment -> ID ASSIGN_SUB expression
Rule 20    assignment -> ID ASSIGN_MULT expression
Rule 21    assignment -> ID ASSIGN_DIV expression
Rule 22    statement -> expression ;
Rule 23    usage -> ID
Rule 24    expression -> negate expression
Rule 25    negate -> -
Rule 26    expression -> VAL_LITERAL
Rule 27    expression -> ( expression )
Rule 28    expression -> expression + expression
Rule 29    expression -> expression - expression
Rule 30    expression -> expression * expression
Rule 31    expression -> expression / expression
Rule 32    expression -> expression COMP_EQU expression
Rule 33    expression -> expression COMP_NEQU expression
Rule 34    expression -> ! expression
Rule 35    expression -> expression COMP_LESS expression
Rule 36    expression -> expression COMP_GTR expression
Rule 37    expression -> expression COMP_LTE expression
Rule 38    expression -> expression COMP_GTE expression
Rule 39    expression -> expression BOOL_AND expression
Rule 40    expression -> expression BOOL_OR expression

Terminals, with rules where they appear

!                    : 34
(                    : 8 9 27
)                    : 8 9 27
*                    : 30
+                    : 28
,                    : 12
-                    : 25 29
/                    : 31
;                    : 4 22
=                    : 16 17
ASSIGN_ADD           : 18
ASSIGN_DIV           : 21
ASSIGN_MULT          : 20
ASSIGN_SUB           : 19
BOOL_AND             : 39
BOOL_OR              : 40
CHAR_LITERAL         : 
COMMAND_PRINT        : 8
COMMAND_RANDOM       : 9
COMMENT              : 
COMP_EQU             : 32
COMP_GTE             : 38
COMP_GTR             : 36
COMP_LESS            : 35
COMP_LTE             : 37
COMP_NEQU            : 33
ID                   : 15 16 17 18 19 20 21 23
STRING_LITERAL       : 
TYPE                 : 15 17
UNKNOWN              : 
VAL_LITERAL          : 26
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

assignment           : 5
declaration          : 4
empty_list           : 10
expression           : 12 13 16 17 18 19 20 21 22 24 27 28 28 29 29 30 30 31 31 32 32 33 33 34 35 35 36 36 37 37 38 38 39 39 40 40
function             : 7
list                 : 8 12
negate               : 24
nonempty_list        : 9 11
program              : 0
statement            : 3
statements           : 1 3
usage                : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> .
    (3) statements -> . statements statement

    TYPE            reduce using rule 2 (statements -> .)
    VAL_LITERAL     reduce using rule 2 (statements -> .)
    (               reduce using rule 2 (statements -> .)
    !               reduce using rule 2 (statements -> .)
    ID              reduce using rule 2 (statements -> .)
    COMMAND_PRINT   reduce using rule 2 (statements -> .)
    COMMAND_RANDOM  reduce using rule 2 (statements -> .)
    -               reduce using rule 2 (statements -> .)
    $end            reduce using rule 2 (statements -> .)

    program                        shift and go to state 1
    statements                     shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (4) statement -> . declaration ;
    (22) statement -> . expression ;
    (15) declaration -> . TYPE ID
    (17) declaration -> . TYPE ID = expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    $end            reduce using rule 1 (program -> statements .)
    TYPE            shift and go to state 4
    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 14
    declaration                    shift and go to state 15
    negate                         shift and go to state 12
    function                       shift and go to state 5
    statement                      shift and go to state 13

state 3

    (6) expression -> usage .

    +               reduce using rule 6 (expression -> usage .)
    -               reduce using rule 6 (expression -> usage .)
    *               reduce using rule 6 (expression -> usage .)
    /               reduce using rule 6 (expression -> usage .)
    COMP_EQU        reduce using rule 6 (expression -> usage .)
    COMP_NEQU       reduce using rule 6 (expression -> usage .)
    COMP_LESS       reduce using rule 6 (expression -> usage .)
    COMP_GTR        reduce using rule 6 (expression -> usage .)
    COMP_LTE        reduce using rule 6 (expression -> usage .)
    COMP_GTE        reduce using rule 6 (expression -> usage .)
    BOOL_AND        reduce using rule 6 (expression -> usage .)
    BOOL_OR         reduce using rule 6 (expression -> usage .)
    ;               reduce using rule 6 (expression -> usage .)
    )               reduce using rule 6 (expression -> usage .)
    ,               reduce using rule 6 (expression -> usage .)


state 4

    (15) declaration -> TYPE . ID
    (17) declaration -> TYPE . ID = expression

    ID              shift and go to state 18


state 5

    (7) expression -> function .

    +               reduce using rule 7 (expression -> function .)
    -               reduce using rule 7 (expression -> function .)
    *               reduce using rule 7 (expression -> function .)
    /               reduce using rule 7 (expression -> function .)
    COMP_EQU        reduce using rule 7 (expression -> function .)
    COMP_NEQU       reduce using rule 7 (expression -> function .)
    COMP_LESS       reduce using rule 7 (expression -> function .)
    COMP_GTR        reduce using rule 7 (expression -> function .)
    COMP_LTE        reduce using rule 7 (expression -> function .)
    COMP_GTE        reduce using rule 7 (expression -> function .)
    BOOL_AND        reduce using rule 7 (expression -> function .)
    BOOL_OR         reduce using rule 7 (expression -> function .)
    ;               reduce using rule 7 (expression -> function .)
    )               reduce using rule 7 (expression -> function .)
    ,               reduce using rule 7 (expression -> function .)


state 6

    (25) negate -> - .

    VAL_LITERAL     reduce using rule 25 (negate -> - .)
    (               reduce using rule 25 (negate -> - .)
    !               reduce using rule 25 (negate -> - .)
    ID              reduce using rule 25 (negate -> - .)
    COMMAND_PRINT   reduce using rule 25 (negate -> - .)
    COMMAND_RANDOM  reduce using rule 25 (negate -> - .)
    -               reduce using rule 25 (negate -> - .)


state 7

    (5) expression -> assignment .

    +               reduce using rule 5 (expression -> assignment .)
    -               reduce using rule 5 (expression -> assignment .)
    *               reduce using rule 5 (expression -> assignment .)
    /               reduce using rule 5 (expression -> assignment .)
    COMP_EQU        reduce using rule 5 (expression -> assignment .)
    COMP_NEQU       reduce using rule 5 (expression -> assignment .)
    COMP_LESS       reduce using rule 5 (expression -> assignment .)
    COMP_GTR        reduce using rule 5 (expression -> assignment .)
    COMP_LTE        reduce using rule 5 (expression -> assignment .)
    COMP_GTE        reduce using rule 5 (expression -> assignment .)
    BOOL_AND        reduce using rule 5 (expression -> assignment .)
    BOOL_OR         reduce using rule 5 (expression -> assignment .)
    ;               reduce using rule 5 (expression -> assignment .)
    )               reduce using rule 5 (expression -> assignment .)
    ,               reduce using rule 5 (expression -> assignment .)


state 8

    (8) function -> COMMAND_PRINT . ( list )

    (               shift and go to state 19


state 9

    (9) function -> COMMAND_RANDOM . ( nonempty_list )

    (               shift and go to state 20


state 10

    (26) expression -> VAL_LITERAL .

    +               reduce using rule 26 (expression -> VAL_LITERAL .)
    -               reduce using rule 26 (expression -> VAL_LITERAL .)
    *               reduce using rule 26 (expression -> VAL_LITERAL .)
    /               reduce using rule 26 (expression -> VAL_LITERAL .)
    COMP_EQU        reduce using rule 26 (expression -> VAL_LITERAL .)
    COMP_NEQU       reduce using rule 26 (expression -> VAL_LITERAL .)
    COMP_LESS       reduce using rule 26 (expression -> VAL_LITERAL .)
    COMP_GTR        reduce using rule 26 (expression -> VAL_LITERAL .)
    COMP_LTE        reduce using rule 26 (expression -> VAL_LITERAL .)
    COMP_GTE        reduce using rule 26 (expression -> VAL_LITERAL .)
    BOOL_AND        reduce using rule 26 (expression -> VAL_LITERAL .)
    BOOL_OR         reduce using rule 26 (expression -> VAL_LITERAL .)
    ;               reduce using rule 26 (expression -> VAL_LITERAL .)
    )               reduce using rule 26 (expression -> VAL_LITERAL .)
    ,               reduce using rule 26 (expression -> VAL_LITERAL .)


state 11

    (27) expression -> ( . expression )
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 21
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 12

    (24) expression -> negate . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 22
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 13

    (3) statements -> statements statement .

    TYPE            reduce using rule 3 (statements -> statements statement .)
    VAL_LITERAL     reduce using rule 3 (statements -> statements statement .)
    (               reduce using rule 3 (statements -> statements statement .)
    !               reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    COMMAND_PRINT   reduce using rule 3 (statements -> statements statement .)
    COMMAND_RANDOM  reduce using rule 3 (statements -> statements statement .)
    -               reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)


state 14

    (22) statement -> expression . ;
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    ;               shift and go to state 25
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27


state 15

    (4) statement -> declaration . ;

    ;               shift and go to state 36


state 16

    (16) assignment -> ID . = expression
    (18) assignment -> ID . ASSIGN_ADD expression
    (19) assignment -> ID . ASSIGN_SUB expression
    (20) assignment -> ID . ASSIGN_MULT expression
    (21) assignment -> ID . ASSIGN_DIV expression
    (23) usage -> ID .

    =               shift and go to state 37
    ASSIGN_ADD      shift and go to state 40
    ASSIGN_SUB      shift and go to state 39
    ASSIGN_MULT     shift and go to state 38
    ASSIGN_DIV      shift and go to state 41
    +               reduce using rule 23 (usage -> ID .)
    -               reduce using rule 23 (usage -> ID .)
    *               reduce using rule 23 (usage -> ID .)
    /               reduce using rule 23 (usage -> ID .)
    COMP_EQU        reduce using rule 23 (usage -> ID .)
    COMP_NEQU       reduce using rule 23 (usage -> ID .)
    COMP_LESS       reduce using rule 23 (usage -> ID .)
    COMP_GTR        reduce using rule 23 (usage -> ID .)
    COMP_LTE        reduce using rule 23 (usage -> ID .)
    COMP_GTE        reduce using rule 23 (usage -> ID .)
    BOOL_AND        reduce using rule 23 (usage -> ID .)
    BOOL_OR         reduce using rule 23 (usage -> ID .)
    ;               reduce using rule 23 (usage -> ID .)
    )               reduce using rule 23 (usage -> ID .)
    ,               reduce using rule 23 (usage -> ID .)


state 17

    (34) expression -> ! . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 42
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 18

    (15) declaration -> TYPE ID .
    (17) declaration -> TYPE ID . = expression

    ;               reduce using rule 15 (declaration -> TYPE ID .)
    =               shift and go to state 43


state 19

    (8) function -> COMMAND_PRINT ( . list )
    (10) list -> . empty_list
    (11) list -> . nonempty_list
    (14) empty_list -> .
    (12) nonempty_list -> . expression , list
    (13) nonempty_list -> . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    )               reduce using rule 14 (empty_list -> .)
    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    function                       shift and go to state 5
    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 46
    negate                         shift and go to state 12
    list                           shift and go to state 44
    nonempty_list                  shift and go to state 47
    empty_list                     shift and go to state 45

state 20

    (9) function -> COMMAND_RANDOM ( . nonempty_list )
    (12) nonempty_list -> . expression , list
    (13) nonempty_list -> . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 46
    negate                         shift and go to state 12
    nonempty_list                  shift and go to state 48
    function                       shift and go to state 5

state 21

    (27) expression -> ( expression . )
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    )               shift and go to state 49
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27


state 22

    (24) expression -> negate expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 24 (expression -> negate expression .)
    )               reduce using rule 24 (expression -> negate expression .)
    ,               reduce using rule 24 (expression -> negate expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 24 (expression -> negate expression .) ]
  ! -               [ reduce using rule 24 (expression -> negate expression .) ]
  ! *               [ reduce using rule 24 (expression -> negate expression .) ]
  ! /               [ reduce using rule 24 (expression -> negate expression .) ]
  ! COMP_EQU        [ reduce using rule 24 (expression -> negate expression .) ]
  ! COMP_NEQU       [ reduce using rule 24 (expression -> negate expression .) ]
  ! COMP_LESS       [ reduce using rule 24 (expression -> negate expression .) ]
  ! COMP_GTR        [ reduce using rule 24 (expression -> negate expression .) ]
  ! COMP_LTE        [ reduce using rule 24 (expression -> negate expression .) ]
  ! COMP_GTE        [ reduce using rule 24 (expression -> negate expression .) ]
  ! BOOL_AND        [ reduce using rule 24 (expression -> negate expression .) ]
  ! BOOL_OR         [ reduce using rule 24 (expression -> negate expression .) ]


state 23

    (32) expression -> expression COMP_EQU . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 50
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 24

    (37) expression -> expression COMP_LTE . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 51
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 25

    (22) statement -> expression ; .

    TYPE            reduce using rule 22 (statement -> expression ; .)
    VAL_LITERAL     reduce using rule 22 (statement -> expression ; .)
    (               reduce using rule 22 (statement -> expression ; .)
    !               reduce using rule 22 (statement -> expression ; .)
    ID              reduce using rule 22 (statement -> expression ; .)
    COMMAND_PRINT   reduce using rule 22 (statement -> expression ; .)
    COMMAND_RANDOM  reduce using rule 22 (statement -> expression ; .)
    -               reduce using rule 22 (statement -> expression ; .)
    $end            reduce using rule 22 (statement -> expression ; .)


state 26

    (33) expression -> expression COMP_NEQU . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 52
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 27

    (40) expression -> expression BOOL_OR . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 53
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 28

    (36) expression -> expression COMP_GTR . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 54
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 29

    (38) expression -> expression COMP_GTE . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 55
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 30

    (31) expression -> expression / . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 56
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 31

    (30) expression -> expression * . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 57
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 32

    (29) expression -> expression - . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 58
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 33

    (28) expression -> expression + . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 59
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 34

    (35) expression -> expression COMP_LESS . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 60
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 35

    (39) expression -> expression BOOL_AND . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 61
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 36

    (4) statement -> declaration ; .

    TYPE            reduce using rule 4 (statement -> declaration ; .)
    VAL_LITERAL     reduce using rule 4 (statement -> declaration ; .)
    (               reduce using rule 4 (statement -> declaration ; .)
    !               reduce using rule 4 (statement -> declaration ; .)
    ID              reduce using rule 4 (statement -> declaration ; .)
    COMMAND_PRINT   reduce using rule 4 (statement -> declaration ; .)
    COMMAND_RANDOM  reduce using rule 4 (statement -> declaration ; .)
    -               reduce using rule 4 (statement -> declaration ; .)
    $end            reduce using rule 4 (statement -> declaration ; .)


state 37

    (16) assignment -> ID = . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 62
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 38

    (20) assignment -> ID ASSIGN_MULT . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 63
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 39

    (19) assignment -> ID ASSIGN_SUB . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 64
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 40

    (18) assignment -> ID ASSIGN_ADD . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 65
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 41

    (21) assignment -> ID ASSIGN_DIV . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 66
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 42

    (34) expression -> ! expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 34 (expression -> ! expression .)
    )               reduce using rule 34 (expression -> ! expression .)
    ,               reduce using rule 34 (expression -> ! expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 34 (expression -> ! expression .) ]
  ! -               [ reduce using rule 34 (expression -> ! expression .) ]
  ! *               [ reduce using rule 34 (expression -> ! expression .) ]
  ! /               [ reduce using rule 34 (expression -> ! expression .) ]
  ! COMP_EQU        [ reduce using rule 34 (expression -> ! expression .) ]
  ! COMP_NEQU       [ reduce using rule 34 (expression -> ! expression .) ]
  ! COMP_LESS       [ reduce using rule 34 (expression -> ! expression .) ]
  ! COMP_GTR        [ reduce using rule 34 (expression -> ! expression .) ]
  ! COMP_LTE        [ reduce using rule 34 (expression -> ! expression .) ]
  ! COMP_GTE        [ reduce using rule 34 (expression -> ! expression .) ]
  ! BOOL_AND        [ reduce using rule 34 (expression -> ! expression .) ]
  ! BOOL_OR         [ reduce using rule 34 (expression -> ! expression .) ]


state 43

    (17) declaration -> TYPE ID = . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 67
    negate                         shift and go to state 12
    function                       shift and go to state 5

state 44

    (8) function -> COMMAND_PRINT ( list . )

    )               shift and go to state 68


state 45

    (10) list -> empty_list .

    )               reduce using rule 10 (list -> empty_list .)


state 46

    (12) nonempty_list -> expression . , list
    (13) nonempty_list -> expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    ,               shift and go to state 69
    )               reduce using rule 13 (nonempty_list -> expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27


state 47

    (11) list -> nonempty_list .

    )               reduce using rule 11 (list -> nonempty_list .)


state 48

    (9) function -> COMMAND_RANDOM ( nonempty_list . )

    )               shift and go to state 70


state 49

    (27) expression -> ( expression ) .

    +               reduce using rule 27 (expression -> ( expression ) .)
    -               reduce using rule 27 (expression -> ( expression ) .)
    *               reduce using rule 27 (expression -> ( expression ) .)
    /               reduce using rule 27 (expression -> ( expression ) .)
    COMP_EQU        reduce using rule 27 (expression -> ( expression ) .)
    COMP_NEQU       reduce using rule 27 (expression -> ( expression ) .)
    COMP_LESS       reduce using rule 27 (expression -> ( expression ) .)
    COMP_GTR        reduce using rule 27 (expression -> ( expression ) .)
    COMP_LTE        reduce using rule 27 (expression -> ( expression ) .)
    COMP_GTE        reduce using rule 27 (expression -> ( expression ) .)
    BOOL_AND        reduce using rule 27 (expression -> ( expression ) .)
    BOOL_OR         reduce using rule 27 (expression -> ( expression ) .)
    ;               reduce using rule 27 (expression -> ( expression ) .)
    )               reduce using rule 27 (expression -> ( expression ) .)
    ,               reduce using rule 27 (expression -> ( expression ) .)


state 50

    (32) expression -> expression COMP_EQU expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 32 (expression -> expression COMP_EQU expression .)
    -               reduce using rule 32 (expression -> expression COMP_EQU expression .)
    *               reduce using rule 32 (expression -> expression COMP_EQU expression .)
    /               reduce using rule 32 (expression -> expression COMP_EQU expression .)
    COMP_EQU        reduce using rule 32 (expression -> expression COMP_EQU expression .)
    COMP_NEQU       reduce using rule 32 (expression -> expression COMP_EQU expression .)
    COMP_LESS       reduce using rule 32 (expression -> expression COMP_EQU expression .)
    COMP_GTR        reduce using rule 32 (expression -> expression COMP_EQU expression .)
    COMP_LTE        reduce using rule 32 (expression -> expression COMP_EQU expression .)
    COMP_GTE        reduce using rule 32 (expression -> expression COMP_EQU expression .)
    BOOL_AND        reduce using rule 32 (expression -> expression COMP_EQU expression .)
    BOOL_OR         reduce using rule 32 (expression -> expression COMP_EQU expression .)
    ;               reduce using rule 32 (expression -> expression COMP_EQU expression .)
    )               reduce using rule 32 (expression -> expression COMP_EQU expression .)
    ,               reduce using rule 32 (expression -> expression COMP_EQU expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 51

    (37) expression -> expression COMP_LTE expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 37 (expression -> expression COMP_LTE expression .)
    -               reduce using rule 37 (expression -> expression COMP_LTE expression .)
    *               reduce using rule 37 (expression -> expression COMP_LTE expression .)
    /               reduce using rule 37 (expression -> expression COMP_LTE expression .)
    COMP_EQU        reduce using rule 37 (expression -> expression COMP_LTE expression .)
    COMP_NEQU       reduce using rule 37 (expression -> expression COMP_LTE expression .)
    COMP_LESS       reduce using rule 37 (expression -> expression COMP_LTE expression .)
    COMP_GTR        reduce using rule 37 (expression -> expression COMP_LTE expression .)
    COMP_LTE        reduce using rule 37 (expression -> expression COMP_LTE expression .)
    COMP_GTE        reduce using rule 37 (expression -> expression COMP_LTE expression .)
    BOOL_AND        reduce using rule 37 (expression -> expression COMP_LTE expression .)
    BOOL_OR         reduce using rule 37 (expression -> expression COMP_LTE expression .)
    ;               reduce using rule 37 (expression -> expression COMP_LTE expression .)
    )               reduce using rule 37 (expression -> expression COMP_LTE expression .)
    ,               reduce using rule 37 (expression -> expression COMP_LTE expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 52

    (33) expression -> expression COMP_NEQU expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    -               reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    *               reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    /               reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    COMP_EQU        reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    COMP_NEQU       reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    COMP_LESS       reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    COMP_GTR        reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    COMP_LTE        reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    COMP_GTE        reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    BOOL_AND        reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    BOOL_OR         reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    ;               reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    )               reduce using rule 33 (expression -> expression COMP_NEQU expression .)
    ,               reduce using rule 33 (expression -> expression COMP_NEQU expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 53

    (40) expression -> expression BOOL_OR expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 40 (expression -> expression BOOL_OR expression .)
    -               reduce using rule 40 (expression -> expression BOOL_OR expression .)
    *               reduce using rule 40 (expression -> expression BOOL_OR expression .)
    /               reduce using rule 40 (expression -> expression BOOL_OR expression .)
    COMP_EQU        reduce using rule 40 (expression -> expression BOOL_OR expression .)
    COMP_NEQU       reduce using rule 40 (expression -> expression BOOL_OR expression .)
    COMP_LESS       reduce using rule 40 (expression -> expression BOOL_OR expression .)
    COMP_GTR        reduce using rule 40 (expression -> expression BOOL_OR expression .)
    COMP_LTE        reduce using rule 40 (expression -> expression BOOL_OR expression .)
    COMP_GTE        reduce using rule 40 (expression -> expression BOOL_OR expression .)
    BOOL_AND        reduce using rule 40 (expression -> expression BOOL_OR expression .)
    BOOL_OR         reduce using rule 40 (expression -> expression BOOL_OR expression .)
    ;               reduce using rule 40 (expression -> expression BOOL_OR expression .)
    )               reduce using rule 40 (expression -> expression BOOL_OR expression .)
    ,               reduce using rule 40 (expression -> expression BOOL_OR expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 54

    (36) expression -> expression COMP_GTR expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 36 (expression -> expression COMP_GTR expression .)
    -               reduce using rule 36 (expression -> expression COMP_GTR expression .)
    *               reduce using rule 36 (expression -> expression COMP_GTR expression .)
    /               reduce using rule 36 (expression -> expression COMP_GTR expression .)
    COMP_EQU        reduce using rule 36 (expression -> expression COMP_GTR expression .)
    COMP_NEQU       reduce using rule 36 (expression -> expression COMP_GTR expression .)
    COMP_LESS       reduce using rule 36 (expression -> expression COMP_GTR expression .)
    COMP_GTR        reduce using rule 36 (expression -> expression COMP_GTR expression .)
    COMP_LTE        reduce using rule 36 (expression -> expression COMP_GTR expression .)
    COMP_GTE        reduce using rule 36 (expression -> expression COMP_GTR expression .)
    BOOL_AND        reduce using rule 36 (expression -> expression COMP_GTR expression .)
    BOOL_OR         reduce using rule 36 (expression -> expression COMP_GTR expression .)
    ;               reduce using rule 36 (expression -> expression COMP_GTR expression .)
    )               reduce using rule 36 (expression -> expression COMP_GTR expression .)
    ,               reduce using rule 36 (expression -> expression COMP_GTR expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 55

    (38) expression -> expression COMP_GTE expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 38 (expression -> expression COMP_GTE expression .)
    -               reduce using rule 38 (expression -> expression COMP_GTE expression .)
    *               reduce using rule 38 (expression -> expression COMP_GTE expression .)
    /               reduce using rule 38 (expression -> expression COMP_GTE expression .)
    COMP_EQU        reduce using rule 38 (expression -> expression COMP_GTE expression .)
    COMP_NEQU       reduce using rule 38 (expression -> expression COMP_GTE expression .)
    COMP_LESS       reduce using rule 38 (expression -> expression COMP_GTE expression .)
    COMP_GTR        reduce using rule 38 (expression -> expression COMP_GTE expression .)
    COMP_LTE        reduce using rule 38 (expression -> expression COMP_GTE expression .)
    COMP_GTE        reduce using rule 38 (expression -> expression COMP_GTE expression .)
    BOOL_AND        reduce using rule 38 (expression -> expression COMP_GTE expression .)
    BOOL_OR         reduce using rule 38 (expression -> expression COMP_GTE expression .)
    ;               reduce using rule 38 (expression -> expression COMP_GTE expression .)
    )               reduce using rule 38 (expression -> expression COMP_GTE expression .)
    ,               reduce using rule 38 (expression -> expression COMP_GTE expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 56

    (31) expression -> expression / expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 31 (expression -> expression / expression .)
    -               reduce using rule 31 (expression -> expression / expression .)
    *               reduce using rule 31 (expression -> expression / expression .)
    /               reduce using rule 31 (expression -> expression / expression .)
    COMP_EQU        reduce using rule 31 (expression -> expression / expression .)
    COMP_NEQU       reduce using rule 31 (expression -> expression / expression .)
    COMP_LESS       reduce using rule 31 (expression -> expression / expression .)
    COMP_GTR        reduce using rule 31 (expression -> expression / expression .)
    COMP_LTE        reduce using rule 31 (expression -> expression / expression .)
    COMP_GTE        reduce using rule 31 (expression -> expression / expression .)
    BOOL_AND        reduce using rule 31 (expression -> expression / expression .)
    BOOL_OR         reduce using rule 31 (expression -> expression / expression .)
    ;               reduce using rule 31 (expression -> expression / expression .)
    )               reduce using rule 31 (expression -> expression / expression .)
    ,               reduce using rule 31 (expression -> expression / expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 57

    (30) expression -> expression * expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 30 (expression -> expression * expression .)
    -               reduce using rule 30 (expression -> expression * expression .)
    *               reduce using rule 30 (expression -> expression * expression .)
    /               reduce using rule 30 (expression -> expression * expression .)
    COMP_EQU        reduce using rule 30 (expression -> expression * expression .)
    COMP_NEQU       reduce using rule 30 (expression -> expression * expression .)
    COMP_LESS       reduce using rule 30 (expression -> expression * expression .)
    COMP_GTR        reduce using rule 30 (expression -> expression * expression .)
    COMP_LTE        reduce using rule 30 (expression -> expression * expression .)
    COMP_GTE        reduce using rule 30 (expression -> expression * expression .)
    BOOL_AND        reduce using rule 30 (expression -> expression * expression .)
    BOOL_OR         reduce using rule 30 (expression -> expression * expression .)
    ;               reduce using rule 30 (expression -> expression * expression .)
    )               reduce using rule 30 (expression -> expression * expression .)
    ,               reduce using rule 30 (expression -> expression * expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 58

    (29) expression -> expression - expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 29 (expression -> expression - expression .)
    -               reduce using rule 29 (expression -> expression - expression .)
    *               reduce using rule 29 (expression -> expression - expression .)
    /               reduce using rule 29 (expression -> expression - expression .)
    COMP_EQU        reduce using rule 29 (expression -> expression - expression .)
    COMP_NEQU       reduce using rule 29 (expression -> expression - expression .)
    COMP_LESS       reduce using rule 29 (expression -> expression - expression .)
    COMP_GTR        reduce using rule 29 (expression -> expression - expression .)
    COMP_LTE        reduce using rule 29 (expression -> expression - expression .)
    COMP_GTE        reduce using rule 29 (expression -> expression - expression .)
    BOOL_AND        reduce using rule 29 (expression -> expression - expression .)
    BOOL_OR         reduce using rule 29 (expression -> expression - expression .)
    ;               reduce using rule 29 (expression -> expression - expression .)
    )               reduce using rule 29 (expression -> expression - expression .)
    ,               reduce using rule 29 (expression -> expression - expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 59

    (28) expression -> expression + expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 28 (expression -> expression + expression .)
    -               reduce using rule 28 (expression -> expression + expression .)
    *               reduce using rule 28 (expression -> expression + expression .)
    /               reduce using rule 28 (expression -> expression + expression .)
    COMP_EQU        reduce using rule 28 (expression -> expression + expression .)
    COMP_NEQU       reduce using rule 28 (expression -> expression + expression .)
    COMP_LESS       reduce using rule 28 (expression -> expression + expression .)
    COMP_GTR        reduce using rule 28 (expression -> expression + expression .)
    COMP_LTE        reduce using rule 28 (expression -> expression + expression .)
    COMP_GTE        reduce using rule 28 (expression -> expression + expression .)
    BOOL_AND        reduce using rule 28 (expression -> expression + expression .)
    BOOL_OR         reduce using rule 28 (expression -> expression + expression .)
    ;               reduce using rule 28 (expression -> expression + expression .)
    )               reduce using rule 28 (expression -> expression + expression .)
    ,               reduce using rule 28 (expression -> expression + expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 60

    (35) expression -> expression COMP_LESS expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 35 (expression -> expression COMP_LESS expression .)
    -               reduce using rule 35 (expression -> expression COMP_LESS expression .)
    *               reduce using rule 35 (expression -> expression COMP_LESS expression .)
    /               reduce using rule 35 (expression -> expression COMP_LESS expression .)
    COMP_EQU        reduce using rule 35 (expression -> expression COMP_LESS expression .)
    COMP_NEQU       reduce using rule 35 (expression -> expression COMP_LESS expression .)
    COMP_LESS       reduce using rule 35 (expression -> expression COMP_LESS expression .)
    COMP_GTR        reduce using rule 35 (expression -> expression COMP_LESS expression .)
    COMP_LTE        reduce using rule 35 (expression -> expression COMP_LESS expression .)
    COMP_GTE        reduce using rule 35 (expression -> expression COMP_LESS expression .)
    BOOL_AND        reduce using rule 35 (expression -> expression COMP_LESS expression .)
    BOOL_OR         reduce using rule 35 (expression -> expression COMP_LESS expression .)
    ;               reduce using rule 35 (expression -> expression COMP_LESS expression .)
    )               reduce using rule 35 (expression -> expression COMP_LESS expression .)
    ,               reduce using rule 35 (expression -> expression COMP_LESS expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 61

    (39) expression -> expression BOOL_AND expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    +               reduce using rule 39 (expression -> expression BOOL_AND expression .)
    -               reduce using rule 39 (expression -> expression BOOL_AND expression .)
    *               reduce using rule 39 (expression -> expression BOOL_AND expression .)
    /               reduce using rule 39 (expression -> expression BOOL_AND expression .)
    COMP_EQU        reduce using rule 39 (expression -> expression BOOL_AND expression .)
    COMP_NEQU       reduce using rule 39 (expression -> expression BOOL_AND expression .)
    COMP_LESS       reduce using rule 39 (expression -> expression BOOL_AND expression .)
    COMP_GTR        reduce using rule 39 (expression -> expression BOOL_AND expression .)
    COMP_LTE        reduce using rule 39 (expression -> expression BOOL_AND expression .)
    COMP_GTE        reduce using rule 39 (expression -> expression BOOL_AND expression .)
    BOOL_AND        reduce using rule 39 (expression -> expression BOOL_AND expression .)
    BOOL_OR         reduce using rule 39 (expression -> expression BOOL_AND expression .)
    ;               reduce using rule 39 (expression -> expression BOOL_AND expression .)
    )               reduce using rule 39 (expression -> expression BOOL_AND expression .)
    ,               reduce using rule 39 (expression -> expression BOOL_AND expression .)

  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 31 ]
  ! /               [ shift and go to state 30 ]
  ! COMP_EQU        [ shift and go to state 23 ]
  ! COMP_NEQU       [ shift and go to state 26 ]
  ! COMP_LESS       [ shift and go to state 34 ]
  ! COMP_GTR        [ shift and go to state 28 ]
  ! COMP_LTE        [ shift and go to state 24 ]
  ! COMP_GTE        [ shift and go to state 29 ]
  ! BOOL_AND        [ shift and go to state 35 ]
  ! BOOL_OR         [ shift and go to state 27 ]


state 62

    (16) assignment -> ID = expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 16 (assignment -> ID = expression .)
    )               reduce using rule 16 (assignment -> ID = expression .)
    ,               reduce using rule 16 (assignment -> ID = expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! -               [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! *               [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! /               [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! COMP_EQU        [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! COMP_NEQU       [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! COMP_LESS       [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! COMP_GTR        [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! COMP_LTE        [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! COMP_GTE        [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! BOOL_AND        [ reduce using rule 16 (assignment -> ID = expression .) ]
  ! BOOL_OR         [ reduce using rule 16 (assignment -> ID = expression .) ]


state 63

    (20) assignment -> ID ASSIGN_MULT expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .)
    )               reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .)
    ,               reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! -               [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! *               [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! /               [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! COMP_EQU        [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! COMP_NEQU       [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! COMP_LESS       [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! COMP_GTR        [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! COMP_LTE        [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! COMP_GTE        [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! BOOL_AND        [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]
  ! BOOL_OR         [ reduce using rule 20 (assignment -> ID ASSIGN_MULT expression .) ]


state 64

    (19) assignment -> ID ASSIGN_SUB expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .)
    )               reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .)
    ,               reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! -               [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! *               [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! /               [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! COMP_EQU        [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! COMP_NEQU       [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! COMP_LESS       [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! COMP_GTR        [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! COMP_LTE        [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! COMP_GTE        [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! BOOL_AND        [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]
  ! BOOL_OR         [ reduce using rule 19 (assignment -> ID ASSIGN_SUB expression .) ]


state 65

    (18) assignment -> ID ASSIGN_ADD expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .)
    )               reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .)
    ,               reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! -               [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! *               [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! /               [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! COMP_EQU        [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! COMP_NEQU       [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! COMP_LESS       [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! COMP_GTR        [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! COMP_LTE        [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! COMP_GTE        [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! BOOL_AND        [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]
  ! BOOL_OR         [ reduce using rule 18 (assignment -> ID ASSIGN_ADD expression .) ]


state 66

    (21) assignment -> ID ASSIGN_DIV expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for COMP_EQU resolved as shift
  ! shift/reduce conflict for COMP_NEQU resolved as shift
  ! shift/reduce conflict for COMP_LESS resolved as shift
  ! shift/reduce conflict for COMP_GTR resolved as shift
  ! shift/reduce conflict for COMP_LTE resolved as shift
  ! shift/reduce conflict for COMP_GTE resolved as shift
  ! shift/reduce conflict for BOOL_AND resolved as shift
  ! shift/reduce conflict for BOOL_OR resolved as shift
    ;               reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .)
    )               reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .)
    ,               reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27

  ! +               [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! -               [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! *               [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! /               [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! COMP_EQU        [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! COMP_NEQU       [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! COMP_LESS       [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! COMP_GTR        [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! COMP_LTE        [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! COMP_GTE        [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! BOOL_AND        [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]
  ! BOOL_OR         [ reduce using rule 21 (assignment -> ID ASSIGN_DIV expression .) ]


state 67

    (17) declaration -> TYPE ID = expression .
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression
    (32) expression -> expression . COMP_EQU expression
    (33) expression -> expression . COMP_NEQU expression
    (35) expression -> expression . COMP_LESS expression
    (36) expression -> expression . COMP_GTR expression
    (37) expression -> expression . COMP_LTE expression
    (38) expression -> expression . COMP_GTE expression
    (39) expression -> expression . BOOL_AND expression
    (40) expression -> expression . BOOL_OR expression

    ;               reduce using rule 17 (declaration -> TYPE ID = expression .)
    +               shift and go to state 33
    -               shift and go to state 32
    *               shift and go to state 31
    /               shift and go to state 30
    COMP_EQU        shift and go to state 23
    COMP_NEQU       shift and go to state 26
    COMP_LESS       shift and go to state 34
    COMP_GTR        shift and go to state 28
    COMP_LTE        shift and go to state 24
    COMP_GTE        shift and go to state 29
    BOOL_AND        shift and go to state 35
    BOOL_OR         shift and go to state 27


state 68

    (8) function -> COMMAND_PRINT ( list ) .

    +               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    -               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    *               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    /               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    COMP_EQU        reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    COMP_NEQU       reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    COMP_LESS       reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    COMP_GTR        reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    COMP_LTE        reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    COMP_GTE        reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    BOOL_AND        reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    BOOL_OR         reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    ;               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    )               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)
    ,               reduce using rule 8 (function -> COMMAND_PRINT ( list ) .)


state 69

    (12) nonempty_list -> expression , . list
    (10) list -> . empty_list
    (11) list -> . nonempty_list
    (14) empty_list -> .
    (12) nonempty_list -> . expression , list
    (13) nonempty_list -> . expression
    (5) expression -> . assignment
    (6) expression -> . usage
    (7) expression -> . function
    (24) expression -> . negate expression
    (26) expression -> . VAL_LITERAL
    (27) expression -> . ( expression )
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . expression COMP_EQU expression
    (33) expression -> . expression COMP_NEQU expression
    (34) expression -> . ! expression
    (35) expression -> . expression COMP_LESS expression
    (36) expression -> . expression COMP_GTR expression
    (37) expression -> . expression COMP_LTE expression
    (38) expression -> . expression COMP_GTE expression
    (39) expression -> . expression BOOL_AND expression
    (40) expression -> . expression BOOL_OR expression
    (16) assignment -> . ID = expression
    (18) assignment -> . ID ASSIGN_ADD expression
    (19) assignment -> . ID ASSIGN_SUB expression
    (20) assignment -> . ID ASSIGN_MULT expression
    (21) assignment -> . ID ASSIGN_DIV expression
    (23) usage -> . ID
    (8) function -> . COMMAND_PRINT ( list )
    (9) function -> . COMMAND_RANDOM ( nonempty_list )
    (25) negate -> . -

    )               reduce using rule 14 (empty_list -> .)
    VAL_LITERAL     shift and go to state 10
    (               shift and go to state 11
    !               shift and go to state 17
    ID              shift and go to state 16
    COMMAND_PRINT   shift and go to state 8
    COMMAND_RANDOM  shift and go to state 9
    -               shift and go to state 6

    function                       shift and go to state 5
    usage                          shift and go to state 3
    assignment                     shift and go to state 7
    expression                     shift and go to state 46
    negate                         shift and go to state 12
    list                           shift and go to state 71
    nonempty_list                  shift and go to state 47
    empty_list                     shift and go to state 45

state 70

    (9) function -> COMMAND_RANDOM ( nonempty_list ) .

    +               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    -               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    *               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    /               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    COMP_EQU        reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    COMP_NEQU       reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    COMP_LESS       reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    COMP_GTR        reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    COMP_LTE        reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    COMP_GTE        reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    BOOL_AND        reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    BOOL_OR         reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    ;               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    )               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)
    ,               reduce using rule 9 (function -> COMMAND_RANDOM ( nonempty_list ) .)


state 71

    (12) nonempty_list -> expression , list .

    )               reduce using rule 12 (nonempty_list -> expression , list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 22 resolved as shift
WARNING: shift/reduce conflict for - in state 22 resolved as shift
WARNING: shift/reduce conflict for * in state 22 resolved as shift
WARNING: shift/reduce conflict for / in state 22 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 22 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 22 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 22 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 22 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 22 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 22 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 22 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 22 resolved as shift
WARNING: shift/reduce conflict for + in state 42 resolved as shift
WARNING: shift/reduce conflict for - in state 42 resolved as shift
WARNING: shift/reduce conflict for * in state 42 resolved as shift
WARNING: shift/reduce conflict for / in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 42 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 42 resolved as shift
WARNING: shift/reduce conflict for + in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 62 resolved as shift
WARNING: shift/reduce conflict for * in state 62 resolved as shift
WARNING: shift/reduce conflict for / in state 62 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 62 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 62 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 62 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 62 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 62 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 62 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 62 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 62 resolved as shift
WARNING: shift/reduce conflict for + in state 63 resolved as shift
WARNING: shift/reduce conflict for - in state 63 resolved as shift
WARNING: shift/reduce conflict for * in state 63 resolved as shift
WARNING: shift/reduce conflict for / in state 63 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 63 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 63 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 63 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 63 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 63 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 63 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 63 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 63 resolved as shift
WARNING: shift/reduce conflict for + in state 64 resolved as shift
WARNING: shift/reduce conflict for - in state 64 resolved as shift
WARNING: shift/reduce conflict for * in state 64 resolved as shift
WARNING: shift/reduce conflict for / in state 64 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 64 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 64 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 64 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 64 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 64 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 64 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 64 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 64 resolved as shift
WARNING: shift/reduce conflict for + in state 65 resolved as shift
WARNING: shift/reduce conflict for - in state 65 resolved as shift
WARNING: shift/reduce conflict for * in state 65 resolved as shift
WARNING: shift/reduce conflict for / in state 65 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 65 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 65 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 65 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 65 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 65 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 65 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 65 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 65 resolved as shift
WARNING: shift/reduce conflict for + in state 66 resolved as shift
WARNING: shift/reduce conflict for - in state 66 resolved as shift
WARNING: shift/reduce conflict for * in state 66 resolved as shift
WARNING: shift/reduce conflict for / in state 66 resolved as shift
WARNING: shift/reduce conflict for COMP_EQU in state 66 resolved as shift
WARNING: shift/reduce conflict for COMP_NEQU in state 66 resolved as shift
WARNING: shift/reduce conflict for COMP_LESS in state 66 resolved as shift
WARNING: shift/reduce conflict for COMP_GTR in state 66 resolved as shift
WARNING: shift/reduce conflict for COMP_LTE in state 66 resolved as shift
WARNING: shift/reduce conflict for COMP_GTE in state 66 resolved as shift
WARNING: shift/reduce conflict for BOOL_AND in state 66 resolved as shift
WARNING: shift/reduce conflict for BOOL_OR in state 66 resolved as shift
