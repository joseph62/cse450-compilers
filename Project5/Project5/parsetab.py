
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=ASSIGN_ADDASSIGN_SUBASSIGN_MULTASSIGN_DIVleftBOOL_ORleftBOOL_ANDnonassocCOMP_EQUCOMP_NEQUCOMP_LESSCOMP_LTECOMP_GTRCOMP_GTEleft+-left*/nonassocUNARY_MINUSnonassocUNARY_NOTnonassocLONE_IFnonassocCOMMAND_ELSEID VAL_LITERAL CHAR_LITERAL STRING_LITERAL ASSIGN_ADD ASSIGN_SUB ASSIGN_MULT ASSIGN_DIV COMP_EQU COMP_NEQU COMP_LESS COMP_LTE COMP_GTR COMP_GTE BOOL_AND BOOL_OR WHITESPACE COMMENT COMMAND_RANDOM ALIAS_TYPE COMMAND_IF META_TYPE COMMAND_PRINT TYPE COMMAND_ELSE COMMAND_BREAK COMMAND_WHILE\n    program : statements\n    \n    statements :\n    \n    statements : statements statement \n    \n    statement : scopeupbro '{' statements '}' \n    \n    statement : COMMAND_BREAK ';'\n    \n    scopeupbro :\n    \n    statement : ';'\n    \n    statement : expression ';'\n    \n    statement : declaration ';'\n            | print_statement ';'\n    \n    print_statement : COMMAND_PRINT '(' non_empty_comma_sep_expr ')'\n    \n    non_empty_comma_sep_expr : expression\n    \n    non_empty_comma_sep_expr : expression ',' non_empty_comma_sep_expr\n    \n    declaration : simple_declaration\n                | assign_declaration\n    \n    simple_declaration : type ID\n    \n    assign_declaration : simple_declaration '=' expression\n    \n    statement : COMMAND_IF '(' expression ')' statement %prec LONE_IF\n    \n    statement : COMMAND_IF '(' expression ')' statement COMMAND_ELSE statement\n    \n    statement : COMMAND_WHILE '(' expression ')' statement\n    \n    var_usage : ID\n    \n    expression : var_usage '=' expression\n    \n    expression : var_usage ASSIGN_ADD expression\n    \n    expression : var_usage ASSIGN_SUB expression\n    \n    expression : var_usage ASSIGN_MULT expression\n    \n    expression : var_usage ASSIGN_DIV expression\n    \n    expression : var_usage\n    \n    expression : COMMAND_RANDOM '(' expression ')'\n    \n    type : TYPE\n    \n    type : ALIAS_TYPE\n    \n    type : META_TYPE '(' type ')'\n    \n    expression : expression BOOL_AND expression\n    \n    expression : expression BOOL_OR expression\n    \n    expression : VAL_LITERAL\n    \n    expression : CHAR_LITERAL\n    \n    expression : STRING_LITERAL\n    \n    expression : expression '-' expression\n    \n    expression : expression '*' expression\n    \n    expression : expression '/' expression\n    \n    expression : expression '+' expression\n    \n    expression : expression COMP_EQU expression\n    \n    expression : expression COMP_NEQU expression\n    \n    expression : '-' expression %prec UNARY_MINUS\n    \n    expression : '!' expression %prec UNARY_NOT\n    \n    expression : expression COMP_LESS expression\n    \n    expression : expression COMP_GTR expression\n    \n    expression : expression COMP_LTE expression\n    \n    expression : expression COMP_GTE expression\n    \n    expression : '(' expression ')'\n    "
    
_lr_action_items = {'COMP_LESS':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[28,-27,-36,-35,-34,-21,28,-44,-43,None,-40,None,28,None,-38,28,None,-39,None,None,-37,-49,28,28,28,28,28,28,28,28,28,28,-28,]),'COMMAND_RANDOM':([0,1,3,6,9,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,88,90,91,92,94,95,96,97,],[-2,13,-7,13,13,-3,13,13,13,13,-8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-5,13,13,-9,-2,13,-10,13,13,13,13,-4,13,13,-20,-18,13,-19,]),';':([0,1,3,4,10,11,12,16,17,20,21,23,24,25,26,31,42,43,49,53,54,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,85,86,89,90,91,92,94,95,96,97,],[-2,3,-7,31,-27,-36,49,53,-15,56,-35,-14,-34,-3,-21,-8,-16,-44,-5,-9,-2,-10,-43,-45,-40,-48,-33,-41,-38,-32,-47,-39,-42,-46,-37,-49,-22,-24,-23,-26,-25,3,-17,-28,-11,-4,3,3,-20,-18,3,-19,]),'=':([10,23,26,42,],[44,58,-21,-16,]),'-':([0,1,3,4,6,9,10,11,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,82,83,84,85,86,88,90,91,92,94,95,96,97,],[-2,27,-7,40,27,27,-27,-36,-35,-34,-3,-21,27,27,27,27,-8,27,27,27,27,27,27,27,27,27,40,-44,27,27,27,27,27,-5,27,27,-9,-2,27,-10,27,27,-43,40,-40,40,40,40,-38,40,40,-39,40,40,-37,-49,40,40,40,40,40,40,40,27,40,40,40,-28,27,-4,27,27,-20,-18,27,-19,]),'COMMAND_PRINT':([0,1,3,25,31,49,53,54,56,82,90,91,92,94,95,96,97,],[-2,15,-7,-3,-8,-5,-9,-2,-10,15,-4,15,15,-20,-18,15,-19,]),'TYPE':([0,1,3,25,31,49,51,53,54,56,82,90,91,92,94,95,96,97,],[-2,5,-7,-3,-8,-5,5,-9,-2,-10,5,-4,5,5,-20,-18,5,-19,]),'COMP_NEQU':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[38,-27,-36,-35,-34,-21,38,-44,-43,None,-40,None,38,None,-38,38,None,-39,None,None,-37,-49,38,38,38,38,38,38,38,38,38,38,-28,]),'*':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[34,-27,-36,-35,-34,-21,34,-44,-43,34,34,34,34,34,-38,34,34,-39,34,34,34,-49,34,34,34,34,34,34,34,34,34,34,-28,]),'COMP_LTE':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[36,-27,-36,-35,-34,-21,36,-44,-43,None,-40,None,36,None,-38,36,None,-39,None,None,-37,-49,36,36,36,36,36,36,36,36,36,36,-28,]),'/':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[37,-27,-36,-35,-34,-21,37,-44,-43,37,37,37,37,37,-38,37,37,-39,37,37,37,-49,37,37,37,37,37,37,37,37,37,37,-28,]),'$end':([0,1,2,3,25,31,49,53,56,90,94,95,97,],[-2,-1,0,-7,-3,-8,-5,-9,-10,-4,-20,-18,-19,]),'BOOL_AND':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[35,-27,-36,-35,-34,-21,35,-44,-43,-45,-40,-48,35,-41,-38,-32,-47,-39,-42,-46,-37,-49,35,35,35,35,35,35,35,35,35,35,-28,]),'ASSIGN_MULT':([10,26,],[48,-21,]),'{':([0,1,3,18,25,31,49,53,54,56,82,90,91,92,94,95,96,97,],[-2,-6,-7,54,-3,-8,-5,-9,-2,-10,-6,-4,-6,-6,-20,-18,-6,-19,]),'META_TYPE':([0,1,3,25,31,49,51,53,54,56,82,90,91,92,94,95,96,97,],[-2,14,-7,-3,-8,-5,14,-9,-2,-10,14,-4,14,14,-20,-18,14,-19,]),'ASSIGN_DIV':([10,26,],[47,-21,]),'(':([0,1,3,6,9,13,14,15,19,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,88,90,91,92,94,95,96,97,],[-2,6,-7,6,6,50,51,52,55,57,-3,6,6,6,6,-8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-5,6,6,-9,-2,6,-10,6,6,6,6,-4,6,6,-20,-18,6,-19,]),'COMMAND_WHILE':([0,1,3,25,31,49,53,54,56,82,90,91,92,94,95,96,97,],[-2,19,-7,-3,-8,-5,-9,-2,-10,19,-4,19,19,-20,-18,19,-19,]),'CHAR_LITERAL':([0,1,3,6,9,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,88,90,91,92,94,95,96,97,],[-2,21,-7,21,21,-3,21,21,21,21,-8,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-5,21,21,-9,-2,21,-10,21,21,21,21,-4,21,21,-20,-18,21,-19,]),')':([5,7,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,86,87,93,],[-29,-30,-27,-36,-35,-34,-21,72,-44,-43,-45,-40,-48,-33,-41,-38,-32,-47,-39,-42,-46,-37,-49,-22,-24,-23,-26,-25,86,87,-12,89,91,92,-28,-31,-13,]),'+':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[29,-27,-36,-35,-34,-21,29,-44,-43,29,-40,29,29,29,-38,29,29,-39,29,29,-37,-49,29,29,29,29,29,29,29,29,29,29,-28,]),'COMMAND_BREAK':([0,1,3,25,31,49,53,54,56,82,90,91,92,94,95,96,97,],[-2,12,-7,-3,-8,-5,-9,-2,-10,12,-4,12,12,-20,-18,12,-19,]),'ALIAS_TYPE':([0,1,3,25,31,49,51,53,54,56,82,90,91,92,94,95,96,97,],[-2,7,-7,-3,-8,-5,7,-9,-2,-10,7,-4,7,7,-20,-18,7,-19,]),'COMMAND_IF':([0,1,3,25,31,49,53,54,56,82,90,91,92,94,95,96,97,],[-2,22,-7,-3,-8,-5,-9,-2,-10,22,-4,22,22,-20,-18,22,-19,]),'VAL_LITERAL':([0,1,3,6,9,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,88,90,91,92,94,95,96,97,],[-2,24,-7,24,24,-3,24,24,24,24,-8,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-5,24,24,-9,-2,24,-10,24,24,24,24,-4,24,24,-20,-18,24,-19,]),'COMP_EQU':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[33,-27,-36,-35,-34,-21,33,-44,-43,None,-40,None,33,None,-38,33,None,-39,None,None,-37,-49,33,33,33,33,33,33,33,33,33,33,-28,]),'BOOL_OR':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[32,-27,-36,-35,-34,-21,32,-44,-43,-45,-40,-48,-33,-41,-38,-32,-47,-39,-42,-46,-37,-49,32,32,32,32,32,32,32,32,32,32,-28,]),'ASSIGN_ADD':([10,26,],[46,-21,]),'!':([0,1,3,6,9,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,88,90,91,92,94,95,96,97,],[-2,9,-7,9,9,-3,9,9,9,9,-8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-5,9,9,-9,-2,9,-10,9,9,9,9,-4,9,9,-20,-18,9,-19,]),'COMP_GTR':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[39,-27,-36,-35,-34,-21,39,-44,-43,None,-40,None,39,None,-38,39,None,-39,None,None,-37,-49,39,39,39,39,39,39,39,39,39,39,-28,]),'COMP_GTE':([4,10,11,21,24,26,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,85,86,],[30,-27,-36,-35,-34,-21,30,-44,-43,None,-40,None,30,None,-38,30,None,-39,None,None,-37,-49,30,30,30,30,30,30,30,30,30,30,-28,]),'ID':([0,1,3,5,6,7,8,9,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,87,88,90,91,92,94,95,96,97,],[-2,26,-7,-29,26,-30,42,26,-3,26,26,26,26,-8,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-5,26,26,-9,-2,26,-10,26,26,26,-31,26,-4,26,26,-20,-18,26,-19,]),',':([10,11,21,24,26,43,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,86,],[-27,-36,-35,-34,-21,-44,-43,-45,-40,-48,-33,-41,-38,-32,-47,-39,-42,-46,-37,-49,-22,-24,-23,-26,-25,88,-28,]),'STRING_LITERAL':([0,1,3,6,9,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,52,53,54,55,56,57,58,82,88,90,91,92,94,95,96,97,],[-2,11,-7,11,11,-3,11,11,11,11,-8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-5,11,11,-9,-2,11,-10,11,11,11,11,-4,11,11,-20,-18,11,-19,]),'ASSIGN_SUB':([10,26,],[45,-21,]),'COMMAND_ELSE':([3,31,49,53,56,90,94,95,97,],[-7,-8,-5,-9,-10,-4,-20,96,-19,]),'}':([3,25,31,49,53,54,56,82,90,94,95,97,],[-7,-3,-8,-5,-9,-2,-10,90,-4,-20,-18,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([1,6,9,27,28,29,30,32,33,34,35,36,37,38,39,40,44,45,46,47,48,50,52,55,57,58,82,88,91,92,96,],[4,41,43,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,80,83,84,85,4,80,4,4,4,]),'type':([1,51,82,91,92,96,],[8,79,8,8,8,8,]),'program':([0,],[2,]),'non_empty_comma_sep_expr':([52,88,],[81,93,]),'assign_declaration':([1,82,91,92,96,],[17,17,17,17,17,]),'var_usage':([1,6,9,27,28,29,30,32,33,34,35,36,37,38,39,40,44,45,46,47,48,50,52,55,57,58,82,88,91,92,96,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'statement':([1,82,91,92,96,],[25,25,94,95,97,]),'declaration':([1,82,91,92,96,],[16,16,16,16,16,]),'simple_declaration':([1,82,91,92,96,],[23,23,23,23,23,]),'scopeupbro':([1,82,91,92,96,],[18,18,18,18,18,]),'statements':([0,54,],[1,82,]),'print_statement':([1,82,91,92,96,],[20,20,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yaccy.py',26),
  ('statements -> <empty>','statements',0,'p_zero_statements','yaccy.py',32),
  ('statements -> statements statement','statements',2,'p_statements','yaccy.py',38),
  ('statement -> scopeupbro { statements }','statement',4,'p_block_baby','yaccy.py',46),
  ('statement -> COMMAND_BREAK ;','statement',2,'p_break_statement','yaccy.py',55),
  ('scopeupbro -> <empty>','scopeupbro',0,'p_scope_up_bro','yaccy.py',62),
  ('statement -> ;','statement',1,'p_empty_statement','yaccy.py',70),
  ('statement -> expression ;','statement',2,'p_statement','yaccy.py',76),
  ('statement -> declaration ;','statement',2,'p_declaration_statement','yaccy.py',82),
  ('statement -> print_statement ;','statement',2,'p_declaration_statement','yaccy.py',83),
  ('print_statement -> COMMAND_PRINT ( non_empty_comma_sep_expr )','print_statement',4,'p_print_statement','yaccy.py',89),
  ('non_empty_comma_sep_expr -> expression','non_empty_comma_sep_expr',1,'p_comma_sep_expression_1','yaccy.py',96),
  ('non_empty_comma_sep_expr -> expression , non_empty_comma_sep_expr','non_empty_comma_sep_expr',3,'p_comma_sep_expression_many','yaccy.py',103),
  ('declaration -> simple_declaration','declaration',1,'p_declaration','yaccy.py',110),
  ('declaration -> assign_declaration','declaration',1,'p_declaration','yaccy.py',111),
  ('simple_declaration -> type ID','simple_declaration',2,'p_simple_declaration','yaccy.py',118),
  ('assign_declaration -> simple_declaration = expression','assign_declaration',3,'p_assign_declaration','yaccy.py',131),
  ('statement -> COMMAND_IF ( expression ) statement','statement',5,'p_if_statement','yaccy.py',137),
  ('statement -> COMMAND_IF ( expression ) statement COMMAND_ELSE statement','statement',7,'p_if_else_statement','yaccy.py',143),
  ('statement -> COMMAND_WHILE ( expression ) statement','statement',5,'p_while_statement','yaccy.py',149),
  ('var_usage -> ID','var_usage',1,'p_var_usage','yaccy.py',155),
  ('expression -> var_usage = expression','expression',3,'p_assignment','yaccy.py',163),
  ('expression -> var_usage ASSIGN_ADD expression','expression',3,'p_add_assign','yaccy.py',169),
  ('expression -> var_usage ASSIGN_SUB expression','expression',3,'p_sub_assign','yaccy.py',176),
  ('expression -> var_usage ASSIGN_MULT expression','expression',3,'p_mult_assign','yaccy.py',183),
  ('expression -> var_usage ASSIGN_DIV expression','expression',3,'p_div_assign','yaccy.py',190),
  ('expression -> var_usage','expression',1,'p_var_usage_value','yaccy.py',197),
  ('expression -> COMMAND_RANDOM ( expression )','expression',4,'p_random_call','yaccy.py',203),
  ('type -> TYPE','type',1,'p_type','yaccy.py',209),
  ('type -> ALIAS_TYPE','type',1,'p_alias_type','yaccy.py',215),
  ('type -> META_TYPE ( type )','type',4,'p_meta_type','yaccy.py',225),
  ('expression -> expression BOOL_AND expression','expression',3,'p_boolean_and','yaccy.py',232),
  ('expression -> expression BOOL_OR expression','expression',3,'p_boolean_or','yaccy.py',238),
  ('expression -> VAL_LITERAL','expression',1,'p_val_literal_expression','yaccy.py',245),
  ('expression -> CHAR_LITERAL','expression',1,'p_char_literal_expression','yaccy.py',251),
  ('expression -> STRING_LITERAL','expression',1,'p_string_literal_expression','yaccy.py',257),
  ('expression -> expression - expression','expression',3,'p_arithmetic_expression_sub','yaccy.py',264),
  ('expression -> expression * expression','expression',3,'p_arithmetic_expression_mult','yaccy.py',270),
  ('expression -> expression / expression','expression',3,'p_arithmetic_expression_div','yaccy.py',277),
  ('expression -> expression + expression','expression',3,'p_arithmetic_expression_add','yaccy.py',284),
  ('expression -> expression COMP_EQU expression','expression',3,'p_boolean_expression_equality','yaccy.py',290),
  ('expression -> expression COMP_NEQU expression','expression',3,'p_boolean_expression_inequality','yaccy.py',296),
  ('expression -> - expression','expression',2,'p_arithmetic_expression_negation','yaccy.py',302),
  ('expression -> ! expression','expression',2,'p_boolean_expression_negation','yaccy.py',308),
  ('expression -> expression COMP_LESS expression','expression',3,'p_boolean_expression_less_than','yaccy.py',314),
  ('expression -> expression COMP_GTR expression','expression',3,'p_boolean_expression_greater_than','yaccy.py',320),
  ('expression -> expression COMP_LTE expression','expression',3,'p_boolean_expression_less_than_equal','yaccy.py',326),
  ('expression -> expression COMP_GTE expression','expression',3,'p_boolean_expression_greater_than_equal','yaccy.py',332),
  ('expression -> ( expression )','expression',3,'p_paren_expression','yaccy.py',338),
]
