store 100000 0
# Interpreting: ar_set_size a3 2
load 3 regA
val_copy 2 regB
test_equ regA 0 regC
jump_if_n0 regC init_array_0
load regA regC
store regB regA
test_lte regB regC regD
jump_if_0 regD resize_end_0
load 0 regD
add regD 1 regE
add regE regB regE
store regE 0
store regD 3
store regB regD
resize_start_0:
add regA 1 regA
add regD 1 regD
test_gtr regD regE regF
jump_if_n0 regF resize_end_0
mem_copy regA regD
jump resize_start_0
init_array_0:
mem_copy 0 3
load 0 regC
store regB regC
add regB 1 regB
add regB regC regD
store regD 0
store regC 3
resize_end_0:
# Done Interpreting: ar_set_size a3 2
# Interpreting: val_copy 'h' s4
store 'h' 4
# Done Interpreting: val_copy 'h' s4
# Interpreting: ar_set_idx a3 0 s4
load 3 regA
add regA 0 regA
add regA 1 regA
mem_copy 4 regA
# Done Interpreting: ar_set_idx a3 0 s4
# Interpreting: val_copy 'i' s4
store 'i' 4
# Done Interpreting: val_copy 'i' s4
# Interpreting: ar_set_idx a3 1 s4
load 3 regA
add regA 1 regA
add regA 1 regA
mem_copy 4 regA
# Done Interpreting: ar_set_idx a3 1 s4
# Interpreting: ar_copy a3 a1
load 3 regA
load regA regB
load 0 regC
store regC 3
add regC regB regD
add regD 1 regD
store regD 0
val_copy 0 regD
start_array_copy_5:
test_lte regD regB regE
jump_if_0 regE end_array_copy_5
mem_copy regA regC
out_val regA
out_char ' '
out_val regC
out_char '\n'
add regA 1 regA
add regC 1 regC
add regD 1 regD
jump start_array_copy_5
end_array_copy_5:
# Done Interpreting: ar_copy a3 a1
# Interpreting: ar_copy a1 a2
load 1 regA
load regA regB
load 0 regC
store regC 1
add regC regB regD
add regD 1 regD
store regD 0
val_copy 0 regD
start_array_copy_6:
test_lte regD regB regE
jump_if_0 regE end_array_copy_6
mem_copy regA regC
out_val regA
out_char ' '
out_val regC
out_char '\n'
add regA 1 regA
add regC 1 regC
add regD 1 regD
jump start_array_copy_6
end_array_copy_6:
# Done Interpreting: ar_copy a1 a2
# Interpreting: 
# Empty line
# Done Interpreting: 

