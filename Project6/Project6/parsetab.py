
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "LABEL VAL_LITERAL CHAR_LITERAL SCALAR_VAR ARRAY_VAR REGISTER COMMENT NEWLINE VAL_COPY ADD SUB MULT DIV TEST_LESS TEST_GTR TEST_EQU TEST_NEQU TEST_GTE TEST_LTE JUMP JUMP_IF_0 JUMP_IF_N0 RANDOM OUT_VAL OUT_CHAR NOP AR_GET_IDX AR_SET_IDX AR_GET_SIZE AR_SET_SIZE AR_COPY AR_PUSH AR_POP PUSH POP LOAD STORE MEM_COPY\n    program : statements\n    \n    statements :\n    \n    statements : statements complex_statement\n    \n    complex_statement : statement_comment NEWLINE\n    \n    statement_comment : optional_statement optional_comment\n    \n    optional_statement : statement\n    \n    optional_statement :\n    \n    optional_comment : COMMENT\n    \n    optional_comment :\n    \n    statement : VAL_COPY value store_value\n    \n    math_command : ADD\n                 | SUB\n                 | MULT\n                 | DIV\n                 | TEST_LESS\n                 | TEST_GTR\n                 | TEST_EQU\n                 | TEST_NEQU\n                 | TEST_GTE\n                 | TEST_LTE\n    \n    statement : math_command value value store_value\n    \n    statement : LABEL ':'\n    \n    value : LABEL\n    \n    statement : JUMP value\n    \n    statement : JUMP_IF_0 value value\n    \n    statement : JUMP_IF_N0 value value\n    \n    statement : RANDOM value store_value\n    \n    statement : OUT_VAL value\n    \n    statement : OUT_CHAR value\n    \n    statement : NOP\n    \n    statement : PUSH value\n    \n    statement : POP store_value\n    \n    statement : AR_GET_IDX ARRAY_VAR value SCALAR_VAR\n    \n    statement : AR_SET_IDX ARRAY_VAR value value\n    \n    statement : AR_GET_SIZE ARRAY_VAR SCALAR_VAR\n    \n    statement : AR_SET_SIZE ARRAY_VAR value\n    \n    statement : AR_COPY ARRAY_VAR ARRAY_VAR\n    \n    statement : AR_PUSH ARRAY_VAR ARRAY_VAR\n    \n    statement : AR_POP ARRAY_VAR ARRAY_VAR\n    \n    value : CHAR_LITERAL\n    \n    store_value : SCALAR_VAR\n                | REGISTER\n    \n    value : VAL_LITERAL\n    \n    value : SCALAR_VAR\n    \n    value : REGISTER\n    \n    statement : LOAD value value\n    \n    statement : STORE value value\n    \n    statement : MEM_COPY value value\n    "
    
_lr_action_items = {'TEST_GTE':([0,1,13,67,],[-2,21,-3,-4,]),'NOP':([0,1,13,67,],[-2,3,-3,-4,]),'MEM_COPY':([0,1,13,67,],[-2,22,-3,-4,]),'AR_POP':([0,1,13,67,],[-2,4,-3,-4,]),'AR_GET_SIZE':([0,1,13,67,],[-2,5,-3,-4,]),'TEST_GTR':([0,1,13,67,],[-2,24,-3,-4,]),'TEST_LESS':([0,1,13,67,],[-2,25,-3,-4,]),'JUMP':([0,1,13,67,],[-2,6,-3,-4,]),'VAL_COPY':([0,1,13,67,],[-2,7,-3,-4,]),':':([17,],[54,]),'SCALAR_VAR':([6,7,8,9,11,12,15,16,18,19,20,21,22,23,24,25,27,29,30,31,33,34,38,40,42,43,44,45,46,47,48,49,51,52,53,56,59,62,68,69,73,75,83,],[46,46,46,-13,-14,46,46,46,46,-11,-12,-19,46,46,-16,-15,46,46,-20,64,-18,-17,46,71,-43,-45,-23,-40,-44,64,46,46,46,46,46,46,64,46,46,46,64,86,46,]),'AR_PUSH':([0,1,13,67,],[-2,26,-3,-4,]),'VAL_LITERAL':([6,7,8,9,11,12,15,16,18,19,20,21,22,23,24,25,27,29,30,33,34,38,42,43,44,45,46,48,49,51,52,53,56,62,68,69,83,],[42,42,42,-13,-14,42,42,42,42,-11,-12,-19,42,42,-16,-15,42,42,-20,-18,-17,42,-43,-45,-23,-40,-44,42,42,42,42,42,42,42,42,42,42,]),'RANDOM':([0,1,13,67,],[-2,27,-3,-4,]),'JUMP_IF_N0':([0,1,13,67,],[-2,29,-3,-4,]),'TEST_LTE':([0,1,13,67,],[-2,30,-3,-4,]),'POP':([0,1,13,67,],[-2,31,-3,-4,]),'COMMENT':([0,1,3,13,28,32,41,42,43,44,45,46,50,54,55,57,63,64,65,67,70,71,72,74,76,77,78,79,80,81,82,84,85,86,87,],[-2,-7,-30,-3,60,-6,-24,-43,-45,-23,-40,-44,-31,-22,-29,-28,-42,-41,-32,-4,-39,-35,-10,-36,-25,-46,-48,-38,-27,-26,-37,-47,-21,-33,-34,]),'TEST_NEQU':([0,1,13,67,],[-2,33,-3,-4,]),'MULT':([0,1,13,67,],[-2,9,-3,-4,]),'AR_SET_SIZE':([0,1,13,67,],[-2,10,-3,-4,]),'DIV':([0,1,13,67,],[-2,11,-3,-4,]),'REGISTER':([6,7,8,9,11,12,15,16,18,19,20,21,22,23,24,25,27,29,30,31,33,34,38,42,43,44,45,46,47,48,49,51,52,53,56,59,62,68,69,73,83,],[43,43,43,-13,-14,43,43,43,43,-11,-12,-19,43,43,-16,-15,43,43,-20,63,-18,-17,43,-43,-45,-23,-40,-44,63,43,43,43,43,43,43,63,43,43,43,63,43,]),'PUSH':([0,1,13,67,],[-2,12,-3,-4,]),'SUB':([0,1,13,67,],[-2,20,-3,-4,]),'STORE':([0,1,13,67,],[-2,38,-3,-4,]),'TEST_EQU':([0,1,13,67,],[-2,34,-3,-4,]),'AR_GET_IDX':([0,1,13,67,],[-2,14,-3,-4,]),'JUMP_IF_0':([0,1,13,67,],[-2,15,-3,-4,]),'AR_COPY':([0,1,13,67,],[-2,35,-3,-4,]),'ARRAY_VAR':([4,5,10,14,26,35,37,39,58,66,],[39,40,49,51,58,66,68,70,79,82,]),'NEWLINE':([0,1,3,13,28,32,36,41,42,43,44,45,46,50,54,55,57,60,61,63,64,65,67,70,71,72,74,76,77,78,79,80,81,82,84,85,86,87,],[-2,-7,-30,-3,-9,-6,67,-24,-43,-45,-23,-40,-44,-31,-22,-29,-28,-8,-5,-42,-41,-32,-4,-39,-35,-10,-36,-25,-46,-48,-38,-27,-26,-37,-47,-21,-33,-34,]),'$end':([0,1,2,13,67,],[-2,-1,0,-3,-4,]),'OUT_VAL':([0,1,13,67,],[-2,23,-3,-4,]),'AR_SET_IDX':([0,1,13,67,],[-2,37,-3,-4,]),'LABEL':([0,1,6,7,8,9,11,12,13,15,16,18,19,20,21,22,23,24,25,27,29,30,33,34,38,42,43,44,45,46,48,49,51,52,53,56,62,67,68,69,83,],[-2,17,44,44,44,-13,-14,44,-3,44,44,44,-11,-12,-19,44,44,-16,-15,44,44,-20,-18,-17,44,-43,-45,-23,-40,-44,44,44,44,44,44,44,44,-4,44,44,44,]),'OUT_CHAR':([0,1,13,67,],[-2,18,-3,-4,]),'CHAR_LITERAL':([6,7,8,9,11,12,15,16,18,19,20,21,22,23,24,25,27,29,30,33,34,38,42,43,44,45,46,48,49,51,52,53,56,62,68,69,83,],[45,45,45,-13,-14,45,45,45,45,-11,-12,-19,45,45,-16,-15,45,45,-20,-18,-17,45,-43,-45,-23,-40,-44,45,45,45,45,45,45,45,45,45,45,]),'ADD':([0,1,13,67,],[-2,19,-3,-4,]),'LOAD':([0,1,13,67,],[-2,16,-3,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'value':([6,7,8,12,15,16,18,22,23,27,29,38,48,49,51,52,53,56,62,68,69,83,],[41,47,48,50,52,53,55,56,57,59,62,69,73,74,75,76,77,78,81,83,84,87,]),'optional_comment':([28,],[61,]),'statements':([0,],[1,]),'optional_statement':([1,],[28,]),'math_command':([1,],[8,]),'complex_statement':([1,],[13,]),'statement_comment':([1,],[36,]),'statement':([1,],[32,]),'store_value':([31,47,59,73,],[65,72,80,85,]),'program':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','bad_and_ugly_interpreter.py',298),
  ('statements -> <empty>','statements',0,'p_statements_empty','bad_and_ugly_interpreter.py',303),
  ('statements -> statements complex_statement','statements',2,'p_statements_nonempty','bad_and_ugly_interpreter.py',308),
  ('complex_statement -> statement_comment NEWLINE','complex_statement',2,'p_complex_statement','bad_and_ugly_interpreter.py',314),
  ('statement_comment -> optional_statement optional_comment','statement_comment',2,'p_statement_comment','bad_and_ugly_interpreter.py',320),
  ('optional_statement -> statement','optional_statement',1,'p_statement','bad_and_ugly_interpreter.py',326),
  ('optional_statement -> <empty>','optional_statement',0,'p_no_statement','bad_and_ugly_interpreter.py',332),
  ('optional_comment -> COMMENT','optional_comment',1,'p_comment','bad_and_ugly_interpreter.py',338),
  ('optional_comment -> <empty>','optional_comment',0,'p_no_comment','bad_and_ugly_interpreter.py',343),
  ('statement -> VAL_COPY value store_value','statement',3,'p_val_copy','bad_and_ugly_interpreter.py',348),
  ('math_command -> ADD','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',354),
  ('math_command -> SUB','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',355),
  ('math_command -> MULT','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',356),
  ('math_command -> DIV','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',357),
  ('math_command -> TEST_LESS','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',358),
  ('math_command -> TEST_GTR','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',359),
  ('math_command -> TEST_EQU','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',360),
  ('math_command -> TEST_NEQU','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',361),
  ('math_command -> TEST_GTE','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',362),
  ('math_command -> TEST_LTE','math_command',1,'p_math_command','bad_and_ugly_interpreter.py',363),
  ('statement -> math_command value value store_value','statement',4,'p_math_statement','bad_and_ugly_interpreter.py',369),
  ('statement -> LABEL :','statement',2,'p_label_statement','bad_and_ugly_interpreter.py',375),
  ('value -> LABEL','value',1,'p_label_value','bad_and_ugly_interpreter.py',381),
  ('statement -> JUMP value','statement',2,'p_jump','bad_and_ugly_interpreter.py',387),
  ('statement -> JUMP_IF_0 value value','statement',3,'p_jump_if_0','bad_and_ugly_interpreter.py',393),
  ('statement -> JUMP_IF_N0 value value','statement',3,'p_jump_if_n0','bad_and_ugly_interpreter.py',399),
  ('statement -> RANDOM value store_value','statement',3,'p_random','bad_and_ugly_interpreter.py',405),
  ('statement -> OUT_VAL value','statement',2,'p_out_val','bad_and_ugly_interpreter.py',411),
  ('statement -> OUT_CHAR value','statement',2,'p_out_char','bad_and_ugly_interpreter.py',417),
  ('statement -> NOP','statement',1,'p_nop','bad_and_ugly_interpreter.py',423),
  ('statement -> PUSH value','statement',2,'p_push','bad_and_ugly_interpreter.py',429),
  ('statement -> POP store_value','statement',2,'p_pop','bad_and_ugly_interpreter.py',435),
  ('statement -> AR_GET_IDX ARRAY_VAR value SCALAR_VAR','statement',4,'p_ar_get_idx','bad_and_ugly_interpreter.py',441),
  ('statement -> AR_SET_IDX ARRAY_VAR value value','statement',4,'p_ar_set_idx','bad_and_ugly_interpreter.py',447),
  ('statement -> AR_GET_SIZE ARRAY_VAR SCALAR_VAR','statement',3,'p_ar_get_size','bad_and_ugly_interpreter.py',453),
  ('statement -> AR_SET_SIZE ARRAY_VAR value','statement',3,'p_ar_set_size','bad_and_ugly_interpreter.py',459),
  ('statement -> AR_COPY ARRAY_VAR ARRAY_VAR','statement',3,'p_ar_copy','bad_and_ugly_interpreter.py',465),
  ('statement -> AR_PUSH ARRAY_VAR ARRAY_VAR','statement',3,'p_ar_push','bad_and_ugly_interpreter.py',471),
  ('statement -> AR_POP ARRAY_VAR ARRAY_VAR','statement',3,'p_ar_pop','bad_and_ugly_interpreter.py',477),
  ('value -> CHAR_LITERAL','value',1,'p_char_literal','bad_and_ugly_interpreter.py',483),
  ('store_value -> SCALAR_VAR','store_value',1,'p_store_value','bad_and_ugly_interpreter.py',489),
  ('store_value -> REGISTER','store_value',1,'p_store_value','bad_and_ugly_interpreter.py',490),
  ('value -> VAL_LITERAL','value',1,'p_val_literal','bad_and_ugly_interpreter.py',496),
  ('value -> SCALAR_VAR','value',1,'p_scalar_var_value','bad_and_ugly_interpreter.py',502),
  ('value -> REGISTER','value',1,'p_register','bad_and_ugly_interpreter.py',508),
  ('statement -> LOAD value value','statement',3,'p_load','bad_and_ugly_interpreter.py',514),
  ('statement -> STORE value value','statement',3,'p_store','bad_and_ugly_interpreter.py',520),
  ('statement -> MEM_COPY value value','statement',3,'p_mem_copy','bad_and_ugly_interpreter.py',526),
]
